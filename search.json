[{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"GNU General Public License","title":"GNU General Public License","text":"Version 3, 29 June 2007Copyright © 2007 Free Software Foundation, Inc. <http://fsf.org/> Everyone permitted copy distribute verbatim copies license document, changing allowed.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"preamble","dir":"","previous_headings":"","what":"Preamble","title":"GNU General Public License","text":"GNU General Public License free, copyleft license software kinds works. licenses software practical works designed take away freedom share change works. contrast, GNU General Public License intended guarantee freedom share change versions program–make sure remains free software users. , Free Software Foundation, use GNU General Public License software; applies also work released way authors. can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge wish), receive source code can get want , can change software use pieces new free programs, know can things. protect rights, need prevent others denying rights asking surrender rights. Therefore, certain responsibilities distribute copies software, modify : responsibilities respect freedom others. example, distribute copies program, whether gratis fee, must pass recipients freedoms received. must make sure , , receive can get source code. must show terms know rights. Developers use GNU GPL protect rights two steps: (1) assert copyright software, (2) offer License giving legal permission copy, distribute /modify . developers’ authors’ protection, GPL clearly explains warranty free software. users’ authors’ sake, GPL requires modified versions marked changed, problems attributed erroneously authors previous versions. devices designed deny users access install run modified versions software inside , although manufacturer can . fundamentally incompatible aim protecting users’ freedom change software. systematic pattern abuse occurs area products individuals use, precisely unacceptable. Therefore, designed version GPL prohibit practice products. problems arise substantially domains, stand ready extend provision domains future versions GPL, needed protect freedom users. Finally, every program threatened constantly software patents. States allow patents restrict development use software general-purpose computers, , wish avoid special danger patents applied free program make effectively proprietary. prevent , GPL assures patents used render program non-free. precise terms conditions copying, distribution modification follow.","code":""},{"path":[]},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_0-definitions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"0. Definitions","title":"GNU General Public License","text":"“License” refers version 3 GNU General Public License. “Copyright” also means copyright-like laws apply kinds works, semiconductor masks. “Program” refers copyrightable work licensed License. licensee addressed “”. “Licensees” “recipients” may individuals organizations. “modify” work means copy adapt part work fashion requiring copyright permission, making exact copy. resulting work called “modified version” earlier work work “based ” earlier work. “covered work” means either unmodified Program work based Program. “propagate” work means anything , without permission, make directly secondarily liable infringement applicable copyright law, except executing computer modifying private copy. Propagation includes copying, distribution (without modification), making available public, countries activities well. “convey” work means kind propagation enables parties make receive copies. Mere interaction user computer network, transfer copy, conveying. interactive user interface displays “Appropriate Legal Notices” extent includes convenient prominently visible feature (1) displays appropriate copyright notice, (2) tells user warranty work (except extent warranties provided), licensees may convey work License, view copy License. interface presents list user commands options, menu, prominent item list meets criterion.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_1-source-code","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"1. Source Code","title":"GNU General Public License","text":"“source code” work means preferred form work making modifications . “Object code” means non-source form work. “Standard Interface” means interface either official standard defined recognized standards body, , case interfaces specified particular programming language, one widely used among developers working language. “System Libraries” executable work include anything, work whole, () included normal form packaging Major Component, part Major Component, (b) serves enable use work Major Component, implement Standard Interface implementation available public source code form. “Major Component”, context, means major essential component (kernel, window system, ) specific operating system () executable work runs, compiler used produce work, object code interpreter used run . “Corresponding Source” work object code form means source code needed generate, install, (executable work) run object code modify work, including scripts control activities. However, include work’s System Libraries, general-purpose tools generally available free programs used unmodified performing activities part work. example, Corresponding Source includes interface definition files associated source files work, source code shared libraries dynamically linked subprograms work specifically designed require, intimate data communication control flow subprograms parts work. Corresponding Source need include anything users can regenerate automatically parts Corresponding Source. Corresponding Source work source code form work.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_2-basic-permissions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"2. Basic Permissions","title":"GNU General Public License","text":"rights granted License granted term copyright Program, irrevocable provided stated conditions met. License explicitly affirms unlimited permission run unmodified Program. output running covered work covered License output, given content, constitutes covered work. License acknowledges rights fair use equivalent, provided copyright law. may make, run propagate covered works convey, without conditions long license otherwise remains force. may convey covered works others sole purpose make modifications exclusively , provide facilities running works, provided comply terms License conveying material control copyright. thus making running covered works must exclusively behalf, direction control, terms prohibit making copies copyrighted material outside relationship . Conveying circumstances permitted solely conditions stated . Sublicensing allowed; section 10 makes unnecessary.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_3-protecting-users-legal-rights-from-anti-circumvention-law","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"3. Protecting Users’ Legal Rights From Anti-Circumvention Law","title":"GNU General Public License","text":"covered work shall deemed part effective technological measure applicable law fulfilling obligations article 11 WIPO copyright treaty adopted 20 December 1996, similar laws prohibiting restricting circumvention measures. convey covered work, waive legal power forbid circumvention technological measures extent circumvention effected exercising rights License respect covered work, disclaim intention limit operation modification work means enforcing, work’s users, third parties’ legal rights forbid circumvention technological measures.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_4-conveying-verbatim-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"4. Conveying Verbatim Copies","title":"GNU General Public License","text":"may convey verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice; keep intact notices stating License non-permissive terms added accord section 7 apply code; keep intact notices absence warranty; give recipients copy License along Program. may charge price price copy convey, may offer support warranty protection fee.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_5-conveying-modified-source-versions","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"5. Conveying Modified Source Versions","title":"GNU General Public License","text":"may convey work based Program, modifications produce Program, form source code terms section 4, provided also meet conditions: ) work must carry prominent notices stating modified , giving relevant date. b) work must carry prominent notices stating released License conditions added section 7. requirement modifies requirement section 4 “keep intact notices”. c) must license entire work, whole, License anyone comes possession copy. License therefore apply, along applicable section 7 additional terms, whole work, parts, regardless packaged. License gives permission license work way, invalidate permission separately received . d) work interactive user interfaces, must display Appropriate Legal Notices; however, Program interactive interfaces display Appropriate Legal Notices, work need make . compilation covered work separate independent works, nature extensions covered work, combined form larger program, volume storage distribution medium, called “aggregate” compilation resulting copyright used limit access legal rights compilation’s users beyond individual works permit. Inclusion covered work aggregate cause License apply parts aggregate.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_6-conveying-non-source-forms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"6. Conveying Non-Source Forms","title":"GNU General Public License","text":"may convey covered work object code form terms sections 4 5, provided also convey machine-readable Corresponding Source terms License, one ways: ) Convey object code , embodied , physical product (including physical distribution medium), accompanied Corresponding Source fixed durable physical medium customarily used software interchange. b) Convey object code , embodied , physical product (including physical distribution medium), accompanied written offer, valid least three years valid long offer spare parts customer support product model, give anyone possesses object code either (1) copy Corresponding Source software product covered License, durable physical medium customarily used software interchange, price reasonable cost physically performing conveying source, (2) access copy Corresponding Source network server charge. c) Convey individual copies object code copy written offer provide Corresponding Source. alternative allowed occasionally noncommercially, received object code offer, accord subsection 6b. d) Convey object code offering access designated place (gratis charge), offer equivalent access Corresponding Source way place charge. need require recipients copy Corresponding Source along object code. place copy object code network server, Corresponding Source may different server (operated third party) supports equivalent copying facilities, provided maintain clear directions next object code saying find Corresponding Source. Regardless server hosts Corresponding Source, remain obligated ensure available long needed satisfy requirements. e) Convey object code using peer--peer transmission, provided inform peers object code Corresponding Source work offered general public charge subsection 6d. separable portion object code, whose source code excluded Corresponding Source System Library, need included conveying object code work. “User Product” either (1) “consumer product”, means tangible personal property normally used personal, family, household purposes, (2) anything designed sold incorporation dwelling. determining whether product consumer product, doubtful cases shall resolved favor coverage. particular product received particular user, “normally used” refers typical common use class product, regardless status particular user way particular user actually uses, expects expected use, product. product consumer product regardless whether product substantial commercial, industrial non-consumer uses, unless uses represent significant mode use product. “Installation Information” User Product means methods, procedures, authorization keys, information required install execute modified versions covered work User Product modified version Corresponding Source. information must suffice ensure continued functioning modified object code case prevented interfered solely modification made. convey object code work section , , specifically use , User Product, conveying occurs part transaction right possession use User Product transferred recipient perpetuity fixed term (regardless transaction characterized), Corresponding Source conveyed section must accompanied Installation Information. requirement apply neither third party retains ability install modified object code User Product (example, work installed ROM). requirement provide Installation Information include requirement continue provide support service, warranty, updates work modified installed recipient, User Product modified installed. Access network may denied modification materially adversely affects operation network violates rules protocols communication across network. Corresponding Source conveyed, Installation Information provided, accord section must format publicly documented (implementation available public source code form), must require special password key unpacking, reading copying.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_7-additional-terms","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"7. Additional Terms","title":"GNU General Public License","text":"“Additional permissions” terms supplement terms License making exceptions one conditions. Additional permissions applicable entire Program shall treated though included License, extent valid applicable law. additional permissions apply part Program, part may used separately permissions, entire Program remains governed License without regard additional permissions. convey copy covered work, may option remove additional permissions copy, part . (Additional permissions may written require removal certain cases modify work.) may place additional permissions material, added covered work, can give appropriate copyright permission. Notwithstanding provision License, material add covered work, may (authorized copyright holders material) supplement terms License terms: ) Disclaiming warranty limiting liability differently terms sections 15 16 License; b) Requiring preservation specified reasonable legal notices author attributions material Appropriate Legal Notices displayed works containing ; c) Prohibiting misrepresentation origin material, requiring modified versions material marked reasonable ways different original version; d) Limiting use publicity purposes names licensors authors material; e) Declining grant rights trademark law use trade names, trademarks, service marks; f) Requiring indemnification licensors authors material anyone conveys material (modified versions ) contractual assumptions liability recipient, liability contractual assumptions directly impose licensors authors. non-permissive additional terms considered “restrictions” within meaning section 10. Program received , part , contains notice stating governed License along term restriction, may remove term. license document contains restriction permits relicensing conveying License, may add covered work material governed terms license document, provided restriction survive relicensing conveying. add terms covered work accord section, must place, relevant source files, statement additional terms apply files, notice indicating find applicable terms. Additional terms, permissive non-permissive, may stated form separately written license, stated exceptions; requirements apply either way.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_8-termination","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"8. Termination","title":"GNU General Public License","text":"may propagate modify covered work except expressly provided License. attempt otherwise propagate modify void, automatically terminate rights License (including patent licenses granted third paragraph section 11). However, cease violation License, license particular copyright holder reinstated () provisionally, unless copyright holder explicitly finally terminates license, (b) permanently, copyright holder fails notify violation reasonable means prior 60 days cessation. Moreover, license particular copyright holder reinstated permanently copyright holder notifies violation reasonable means, first time received notice violation License (work) copyright holder, cure violation prior 30 days receipt notice. Termination rights section terminate licenses parties received copies rights License. rights terminated permanently reinstated, qualify receive new licenses material section 10.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_9-acceptance-not-required-for-having-copies","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"9. Acceptance Not Required for Having Copies","title":"GNU General Public License","text":"required accept License order receive run copy Program. Ancillary propagation covered work occurring solely consequence using peer--peer transmission receive copy likewise require acceptance. However, nothing License grants permission propagate modify covered work. actions infringe copyright accept License. Therefore, modifying propagating covered work, indicate acceptance License .","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_10-automatic-licensing-of-downstream-recipients","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"10. Automatic Licensing of Downstream Recipients","title":"GNU General Public License","text":"time convey covered work, recipient automatically receives license original licensors, run, modify propagate work, subject License. responsible enforcing compliance third parties License. “entity transaction” transaction transferring control organization, substantially assets one, subdividing organization, merging organizations. propagation covered work results entity transaction, party transaction receives copy work also receives whatever licenses work party’s predecessor interest give previous paragraph, plus right possession Corresponding Source work predecessor interest, predecessor can get reasonable efforts. may impose restrictions exercise rights granted affirmed License. example, may impose license fee, royalty, charge exercise rights granted License, may initiate litigation (including cross-claim counterclaim lawsuit) alleging patent claim infringed making, using, selling, offering sale, importing Program portion .","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_11-patents","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"11. Patents","title":"GNU General Public License","text":"“contributor” copyright holder authorizes use License Program work Program based. work thus licensed called contributor’s “contributor version”. contributor’s “essential patent claims” patent claims owned controlled contributor, whether already acquired hereafter acquired, infringed manner, permitted License, making, using, selling contributor version, include claims infringed consequence modification contributor version. purposes definition, “control” includes right grant patent sublicenses manner consistent requirements License. contributor grants non-exclusive, worldwide, royalty-free patent license contributor’s essential patent claims, make, use, sell, offer sale, import otherwise run, modify propagate contents contributor version. following three paragraphs, “patent license” express agreement commitment, however denominated, enforce patent (express permission practice patent covenant sue patent infringement). “grant” patent license party means make agreement commitment enforce patent party. convey covered work, knowingly relying patent license, Corresponding Source work available anyone copy, free charge terms License, publicly available network server readily accessible means, must either (1) cause Corresponding Source available, (2) arrange deprive benefit patent license particular work, (3) arrange, manner consistent requirements License, extend patent license downstream recipients. “Knowingly relying” means actual knowledge , patent license, conveying covered work country, recipient’s use covered work country, infringe one identifiable patents country reason believe valid. , pursuant connection single transaction arrangement, convey, propagate procuring conveyance , covered work, grant patent license parties receiving covered work authorizing use, propagate, modify convey specific copy covered work, patent license grant automatically extended recipients covered work works based . patent license “discriminatory” include within scope coverage, prohibits exercise , conditioned non-exercise one rights specifically granted License. may convey covered work party arrangement third party business distributing software, make payment third party based extent activity conveying work, third party grants, parties receive covered work , discriminatory patent license () connection copies covered work conveyed (copies made copies), (b) primarily connection specific products compilations contain covered work, unless entered arrangement, patent license granted, prior 28 March 2007. Nothing License shall construed excluding limiting implied license defenses infringement may otherwise available applicable patent law.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_12-no-surrender-of-others-freedom","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"12. No Surrender of Others’ Freedom","title":"GNU General Public License","text":"conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. convey covered work satisfy simultaneously obligations License pertinent obligations, consequence may convey . example, agree terms obligate collect royalty conveying convey Program, way satisfy terms License refrain entirely conveying Program.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_13-use-with-the-gnu-affero-general-public-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"13. Use with the GNU Affero General Public License","title":"GNU General Public License","text":"Notwithstanding provision License, permission link combine covered work work licensed version 3 GNU Affero General Public License single combined work, convey resulting work. terms License continue apply part covered work, special requirements GNU Affero General Public License, section 13, concerning interaction network apply combination .","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_14-revised-versions-of-this-license","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"14. Revised Versions of this License","title":"GNU General Public License","text":"Free Software Foundation may publish revised /new versions GNU General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies certain numbered version GNU General Public License “later version” applies , option following terms conditions either numbered version later version published Free Software Foundation. Program specify version number GNU General Public License, may choose version ever published Free Software Foundation. Program specifies proxy can decide future versions GNU General Public License can used, proxy’s public statement acceptance version permanently authorizes choose version Program. Later license versions may give additional different permissions. However, additional obligations imposed author copyright holder result choosing follow later version.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_15-disclaimer-of-warranty","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"15. Disclaimer of Warranty","title":"GNU General Public License","text":"WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_16-limitation-of-liability","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"16. Limitation of Liability","title":"GNU General Public License","text":"EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MODIFIES /CONVEYS PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"id_17-interpretation-of-sections-15-and-16","dir":"","previous_headings":"TERMS AND CONDITIONS","what":"17. Interpretation of Sections 15 and 16","title":"GNU General Public License","text":"disclaimer warranty limitation liability provided given local legal effect according terms, reviewing courts shall apply local law closely approximates absolute waiver civil liability connection Program, unless warranty assumption liability accompanies copy Program return fee. END TERMS CONDITIONS","code":""},{"path":"https://padpadpadpad.github.io/rTPC/LICENSE.html","id":"how-to-apply-these-terms-to-your-new-programs","dir":"","previous_headings":"","what":"How to Apply These Terms to Your New Programs","title":"GNU General Public License","text":"develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively state exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program terminal interaction, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, program’s commands might different; GUI interface, use “box”. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. information , apply follow GNU GPL, see <http://www.gnu.org/licenses/>. GNU General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License. first, please read <http://www.gnu.org/philosophy/--lgpl.html>.","code":"<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program.  If not, see <http://www.gnu.org/licenses/>. <program>  Copyright (C) <year>  <name of author> This program comes with ABSOLUTELY NO WARRANTY; for details type 'show w'. This is free software, and you are welcome to redistribute it under certain conditions; type 'show c' for details."},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"first-steps","dir":"Articles","previous_headings":"","what":"First steps","title":"Adding Models to rTPC","text":"first thing want model potentially useful rTPC check whether ’s already ! rTPC already contains 49 models designed variety different data. quite likely point similar (identical) model already serves purpose. save work can? can find models currently available using rTPC::get_model_names().","code":"# show all models in rTPC rTPC::get_model_names() #>  [1] \"analytiskontodimas_2004\"       \"ashrafi1_2018\"                 #>  [3] \"ashrafi2_2018\"                 \"ashrafi3_2018\"                 #>  [5] \"ashrafi4_2018\"                 \"ashrafi5_2018\"                 #>  [7] \"atkin_2005\"                    \"beta_2012\"                     #>  [9] \"betatypesimplified_2008\"       \"boatman_2017\"                  #> [11] \"briere1_1999\"                  \"briere1simplified_1999\"        #> [13] \"briere2_1999\"                  \"briere2simplified_1999\"        #> [15] \"briereextended_2021\"           \"briereextendedsimplified_2021\" #> [17] \"delong_2017\"                   \"deutsch_2008\"                  #> [19] \"eubank_1973\"                   \"flextpc_2024\"                  #> [21] \"flinn_1991\"                    \"gaussian_1987\"                 #> [23] \"gaussianmodified_2006\"         \"hinshelwood_1947\"              #> [25] \"janisch1_1925\"                 \"janisch2_1925\"                 #> [27] \"joehnk_2008\"                   \"johnsonlewin_1946\"             #> [29] \"kamykowski_1985\"               \"lactin2_1995\"                  #> [31] \"lobry_1991\"                    \"mitchell_2009\"                 #> [33] \"oneill_1972\"                   \"pawar_2018\"                    #> [35] \"quadratic_2008\"                \"ratkowsky_1983\"                #> [37] \"rezende_2019\"                  \"rosso_1993\"                    #> [39] \"sharpeschoolfull_1981\"         \"sharpeschoolhigh_1981\"         #> [41] \"sharpeschoollow_1981\"          \"spain_1982\"                    #> [43] \"stinner_1974\"                  \"taylorsexton_1972\"             #> [45] \"thomas_2012\"                   \"thomas_2017\"                   #> [47] \"tomlinsonphillips_2015\"        \"warrendreyer_2006\"             #> [49] \"weibull_1995\""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"forking-the-repository","dir":"Articles","previous_headings":"First steps","what":"Forking the repository","title":"Adding Models to rTPC","text":"easiest way start working rTPC fork repo. Github excellent instructions . Working fork repository allow commit rTPC project, contribute commits back main repository pull request.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"setting-up-your-workspace-and-r-installation","dir":"Articles","previous_headings":"First steps","what":"Setting up your workspace and R installation","title":"Adding Models to rTPC","text":"strongly suggested install packages “Suggests” section rTPC (easily found DESCRIPTION file), alongside packages devtools usethis (see deeper explanation packages). done , git clone fork rTPC folder choice computer, open rTPC.Rproj file using RStudio.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"adding-a-model","dir":"Articles","previous_headings":"","what":"Adding a model","title":"Adding Models to rTPC","text":"Adding model rTPC consists 4 major steps: Add model code, starting values, limits. Add test file. Add model rTPC database. Clean check. Models generally named according scheme authormodifier_YYYY. model authors called King Bishop published 1992 usually codified kingbishop_1992. also proposed modified model, simplified version original paper, probably appear kingbishopmodified_1992 kingbishopsimplified_1992 kingbishopmodifiedsimplified_1992 many authors, another better description model initials descriptors may used, may changed package maintainers think simpler, consistent, identifiable names.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"model-equation","dir":"Articles","previous_headings":"Adding a model","what":"Model equation","title":"Adding Models to rTPC","text":"example, let’s implement Eubank model Significance Thermodynamics Fluctuating Versus Static Thermal Environments Heliothis zea Egg Development Rates. model (eq4) originally derived just bollworm, magic numbers: \\[R(T) = \\frac{800}{(T-91)^2+432}\\] generalisation, know looking paper \\(T_{opt} = 91\\), numbers 800 432 species-specific (thus fit). can reformulate equation : \\[rate(temp) = \\frac{}{(temp-T_{opt})^2+b}\\] \\(\\) \\(b\\) arbitrary parameters fitting, \\(T_{opt}\\) can least approximated data.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"implementation","dir":"Articles","previous_headings":"Adding a model","what":"Implementation","title":"Adding Models to rTPC","text":"model lives file named function, R directory. case eubank_1973.R. can create one using function usethis::use_r(\"eubank_1973\") Within file 4 functions: eubank_1973() - model eubank_1973.starting_vals() - starting values eubank_1973.lower_lims() - lower limits eubank_1973.upper_lims() - upper limits important auxiliary functions (eubank_1973.starting_vals(), eubank_1973.lower_lims() eubank_1973.upper_lims()) named manner, allow unified method specifying setting starting values/limits work.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"model-function---eubank_1973","dir":"Articles","previous_headings":"Adding a model > Implementation","what":"Model function - eubank_1973()","title":"Adding Models to rTPC","text":"First must implement actual model (.e. equation , R code). model function takes parameters fit model arguments, temperature first convention, returns estimates trait value given temperatures parameter values. models take temperature ºC predictor variable. model uses temperature degrees Kelvin, change within function, seen Sharpe-Schoolfield models.","code":"eubank_1973 <- function(temp, topt, a, b){   est <- a / ((temp - topt)^2 + b)   return(est) } sharpeschoolhigh_1981 <- function(temp, r_tref, e, eh, th, tref){   tref <- 273.15 + tref   k <- 8.62e-05   boltzmann.term <- r_tref*exp(e/k * (1/tref - 1/(temp + 273.15)))   inactivation.term <- 1/(1 + exp(eh/k * (1/(th + 273.15) - 1/(temp + 273.15))))   return(boltzmann.term * inactivation.term) }"},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"starting-values---eubank_1973-starting_vals","dir":"Articles","previous_headings":"Adding a model > Implementation","what":"Starting values - eubank_1973.starting_vals()","title":"Adding Models to rTPC","text":"Deciding sensible starting values notoriously tricky. many cases fairly arbitrary, though certain cases estimate can obtained data (e.g. \\(T_{opt}\\) \\(r_{max}\\)). Starting values functions provided dataframe arguments called d internally within function, contains temperature trait values given curve: Every model.starting_values() function approximate form, taking d argument, returning named list starting values. case: case eubank model, \\(\\) \\(b\\) arbitrary. can take fairly sensible values approximately right magnitude (say \\(= 300\\) \\(b = 50\\)). \\(T_{opt}\\) hand value can derive data, case ’s temperature \\(rate\\) maximum. lets put together starting_vals function reiterate earlier point, essential starting values function named appropriately, e.g. eubank_1973.starting_vals(). following can work: eubank_1973.startingvals() eubank_1973.start_vals() eubank_1973_starting_vals() .starting_vals() model.starting_vals()","code":"# A slightly compressed example of how d is generated library(rTPC)  subs <- subset(chlorella_tpc, chlorella_tpc$curve_id == 1) d <- data.frame(x=subs$temp, y=subs$rate, stringsAsFactors = FALSE) d <- d[order(d$x),] d #>     x          y #> 1  16 0.12712578 #> 2  19 0.26596797 #> 3  22 0.38513241 #> 4  25 0.45183566 #> 5  28 0.83357098 #> 6  31 1.19034130 #> 7  34 0.95635362 #> 8  37 1.61689379 #> 9  40 1.47394412 #> 10 43 1.48238927 #> 11 46 0.02100078 #> 12 49 0.17843617 eubank_1973.starting_vals <- function(d){   # starting values go here   return(c(topt=topt, a=a, b=b)) } eubank_1973.starting_vals <- function(d){   rmax = max(d$y, na.rm = TRUE)  # Find max trait value   topt = mean(d$x[d$y == rmax])  # Find T of rmax   a = 300   b = 50   return(c(topt=topt, a=a, b=b)) }"},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"limits---eubank_1973-lower_lims-eubank_1973-upper_lims","dir":"Articles","previous_headings":"Adding a model > Implementation","what":"Limits - eubank_1973.lower_lims() & eubank_1973.upper_lims()","title":"Adding Models to rTPC","text":"NLLS fitting often fails unconstrained (may take one parameter infinity ignore others). Even specifying absurdly large infinite limits can make optimiser behave better. , often beneficial provide realistic bounds upper lower limits parameter. take functional form starting_vals function, requiring one argument (d) returning named list. Generally speaking best keep limits fairly wide unless good biological reason otherwise. instance \\(T_{opt}\\) never going 150 °C, likely lot lower. lower bound unlikely optimal trait value occur temperatures 0 °C. gives us fairly reasonable bounds values \\(T_{opt}\\). \\(\\) \\(b\\), however, arbitrary values. Just looking functional form model can see \\(\\) goes 0, \\(b = 0-(T-T_{opt})\\) end fairly nonsensical answers (either negative trait values undefined results), can bound low end 0 safe. terms upper limits, real idea large values may go (proportional units trait), can’t set reasonable bounds aside Inf. put together, lower upper limit functions eubank_1976:","code":"eubank_1973.lower_lims <- function(d){   topt = 0   a = 0   b = 0   return(c(topt=topt, a=a, b=b)) }  eubank_1973.upper_lims <- function(d){   topt = 150   a = Inf   b = Inf   return(c(topt=topt, a=a, b=b)) }"},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"documentation","dir":"Articles","previous_headings":"Adding a model > Implementation","what":"Documentation","title":"Adding Models to rTPC","text":"rTPC leverages roxygen2 documentation. file contains documentation definitions top file special comments starting #'. best way implement copy another model file (atkin_2005) modify suit needs. Things modify: first line description parameters author reference equation note (poorly fitting) examples export directive (must match name model! starting value limit functions need exporting)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"updating-the-model-database","dir":"Articles","previous_headings":"Adding a model","what":"Updating the model database","title":"Adding Models to rTPC","text":"created model file, need add model rTPC’s database model names, knows model available. simply requires modifying mod_names vector within get_model_names.R file include new model. Make sure model name exactly original file, enclosed quotes.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"testing-model-implementation","dir":"Articles","previous_headings":"Adding a model","what":"Testing model implementation","title":"Adding Models to rTPC","text":"Now model set , next port call simply run integration test. located tests/testthat/test-startingvalues.R provide result somewhat like. test failed, output instead like : case can see simply misspelled name model get_model_names.R file, need change . one test three failed, likely issue names functions actual model file.","code":"[ FAIL 0 | WARN 0 | SKIP 0 | PASS 3 ] [ FAIL 3 | WARN 0 | SKIP 0 | PASS 0 ]  ── Failure (test-startingvalues.R:42:3): All models can generate starting values ── length(mod_names) not equal to `starting_count`. 1/1 mismatches [1] 48 - 47 == 1 No starting values for:  ebank_1973  ── Failure (test-startingvalues.R:46:3): All models can generate lower limits ── length(mod_names) not equal to `lower_count`. 1/1 mismatches [1] 48 - 47 == 1 No lower limits for:  ebank_1973  ── Failure (test-startingvalues.R:50:3): All models can generate upper limits ── length(mod_names) not equal to `upper_count`. 1/1 mismatches [1] 48 - 47 == 1 No upper limits for:  ebank_1973 [ FAIL 3 | WARN 0 | SKIP 0 | PASS 0 ]"},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"individual-model-test","dir":"Articles","previous_headings":"Adding a model","what":"Individual model test","title":"Adding Models to rTPC","text":"model requires model test, make sure changes future cause major fitting issues. test files live tests/testthat directory. Creating new one RStudio easy! Just make sure model file script window, run command usethis::use_test(). create new test file, case tests/testthat/test-eubank_1973.R Tests mostly boilerplate, however things need changed, can copy code another test file, test-atkin_2005.R. main items changed : model name throughout (5 occurrences) model arguments within nls_multstart iter argument nls_multstart (something like c(3,3,3,3) model 4 free parameters) final test file look something like :","code":"# do not run the test on CRAN as they take too long testthat::skip_on_cran()  # method: fit model and get predictions. Check these against others.  # load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'eubank_1973')  # fit model mod <- nls.multstart::nls_multstart(rate~eubank_1973(temp = temp, tops, a, b),                                     data = d,                                     iter = c(3,3,3),                                     start_lower = start_vals - 10,                                     start_upper = start_vals + 10,                                     lower = get_lower_lims(d$temp, d$rate, model_name = 'eubank_1973'),                                     upper = get_upper_lims(d$temp, d$rate, model_name = 'eubank_1973'),                                     supp_errors = 'Y',                                     convergence_count = FALSE)  # get predictions preds <- broom::augment(mod) # dput(round(preds$.fitted, 1))  # plot ggplot(preds) +   geom_point(aes(temp, rate)) +   geom_line(aes(temp, .fitted)) +   theme_bw()  # run test testthat::test_that(\"eubank_1973 function works\", {   testthat::expect_equal(     round(preds$.fitted, 1),     c(0.2, 0.2, 0.3, 0.4, 0.6, 0.9, 1.3, 1.6, 1.4, 1, 0.7, 0.4)) })"},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"getting-results-values","dir":"Articles","previous_headings":"Adding a model > Individual model test","what":"Getting results values","title":"Adding Models to rTPC","text":"second--final line test file defines expected return model run. really feasible know ahead time, luckily code contains extra function makes retrieving expected value easy. running test first time, uncomment (remove hashtag) line # dput(round(preds$.fitted, 1)). Now run test testthat::test_file(\"tests/testthat/test-eubank_1973.R\") test likely fail, also output vector console. can paste vector (case c(0.2, 0.2, 0.3, 0.4, 0.6, 0.9, 1.3, 1.6, 1.4, 1, 0.7, 0.4)) onto second last line (remembering extra closing parenthesis), save run . second run test execute properly. can proceed commenting back dput() line.","code":"[ FAIL 0 | WARN 0 | SKIP 0 | PASS 0 ]c(0.2, 0.2, 0.3, 0.4, 0.6, 0.9, 1.3, 1.6, 1.4, 1, 0.7, 0.4) [ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ]  ── Failure (test-eubank_1973.R:39:3): eubank_1973 function works ─────────────── round(preds$.fitted, 1) not equal to c(0.2, 0.3, 0.5, 0.6, 0.8, 1, 1.1, 1.2, 1.3, 1.2, 1, 0.1). 11/12 mismatches (average diff: 0.209) [2]  0.2 - 0.3 == -0.1 [3]  0.3 - 0.5 == -0.2 [4]  0.4 - 0.6 == -0.2 [5]  0.6 - 0.8 == -0.2 [6]  0.9 - 1.0 == -0.1 [7]  1.3 - 1.1 ==  0.2 [8]  1.6 - 1.2 ==  0.4 [9]  1.4 - 1.3 ==  0.1 [10] 1.0 - 1.2 == -0.2 ... [ FAIL 1 | WARN 0 | SKIP 0 | PASS 0 ] [ FAIL 0 | WARN 0 | SKIP 0 | PASS 1 ]"},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"testing","dir":"Articles","previous_headings":"","what":"Testing","title":"Adding Models to rTPC","text":"point worth bit testing new function. Load new version package devtools::load_all(\".\") new R (Rmarkdown) file try running tests new function. trouble fitting, modify starting values limits try get fairly good fits. may also play iter argument nls_multstart. happy everything ’s time run R CMD CHECK (example using devtools::check()). Look make sure warnings errors.","code":"── R CMD check results ── Duration: 4m 55.6s  0 errors ✔ | 0 warnings ✔ | 0 notes ✔  R CMD check succeeded"},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"documenting-your-model","dir":"Articles","previous_headings":"","what":"Documenting your model","title":"Adding Models to rTPC","text":"Documentation needs generated order available model. , simply run command devtools::document(). completed can view documentation internally using ?modelname_yyyy.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"commiting-your-changes-back-upstream","dir":"Articles","previous_headings":"","what":"Commiting your changes back upstream","title":"Adding Models to rTPC","text":"Now fully implemented model time hand back rTPC team integration. simplest way commit changes (including .Rd documentation file), push forked repo, open pull request (prompt appear repo github website). Please make sure include sensible title “Add eubank_1976 model”. Include description notes model , decisions may make creating , problems difficulties fitting model. See PR #58 example good pull request.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"done","dir":"Articles","previous_headings":"","what":"Done!","title":"Adding Models to rTPC","text":"Now done can go well-earned cup tea! deserve !","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/adding_models.html","id":"auxiliary-model-function-dispatch","dir":"Articles","previous_headings":"","what":"Auxiliary model function dispatch","title":"Adding Models to rTPC","text":"note rTPC dispatches auxiliary model functions hood, rTPC relies .call() function locate run appropriate model functions. good example getting starting values. get_start_vals() function entirety replicated : model name checked list valid models, source data frame (d) created. Finally model function name created pasting together name model along \".starting_vals\": function name executed using .call() along list arguments (case simply d), value returned. model function present spelled incorrectly, .call() throw error tryCatch convert NULL output. case entirely missing model, get_start_vals() errors early specific error message. Built 0.6967473s","code":"get_start_vals <- function(x, y, model_name) {    mod_names <- get_model_names(returnall = TRUE)   model_name <- tryCatch(rlang::arg_match(model_name, mod_names), error = function(e){     cli::cli_abort(c(\"x\"=\"Supplied {.arg model_name} ({.val {model_name}}) is not an available model in rTPC.\",                      \"!\"=\"Please check the spelling of {.arg model_name}.\",                      \" \"=\"(run {.fn rTPC::get_model_names} to see all valid names.)\",                      \"\"), call=rlang::caller_env(n=4))   })    # make data frame   d <- data.frame(x, y, stringsAsFactors = FALSE)   d <- d[order(d$x),]    start_vals <- tryCatch(do.call(paste0(model_name, \".starting_vals\"), list(d=d)),                          error = function(e){NULL})    return(start_vals) } model_name <- \"eubank_1976\" paste0(model_name, \".starting_vals\") #> [1] \"eubank_1976.starting_vals\""},{"path":[]},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_many_curves.html","id":"things-to-consider","dir":"Articles","previous_headings":"","what":"Things to consider","title":"Bootstrapping many curves using rTPC","text":"comprehensive run-types bootstrapping can done within rTPC workflow, please see vignette(\"bootstrapping_models\") vignette written example run chosen bootstrapping method multiple models","code":"# load packages library(boot) library(car) library(rTPC) library(nls.multstart) library(broom) library(tidyverse) library(patchwork) library(minpack.lm)"},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_many_curves.html","id":"the-problem","dir":"Articles","previous_headings":"","what":"The problem","title":"Bootstrapping many curves using rTPC","text":"vignette inspired email got someone struggling implement bootstrapping approach using package car multiple curves. First demonstrate approach done using approach using tidyverse car, breaks. fit gaussian_1987() model first three curves chlorella_tpc dataset.  Using pipeline used previously, extract coefficients model, fun minpack.lm::nlsLM() one run car::Boot(). However, time output minpack.lm::nlsLM() car::Boot() need stored list column within d_fits. Extracting coefficients refitting models using minpack.lm::nlsLM() works fine. However, using car::Boot() currently gives error. error, object .x found, likely means car::Boot() incompatible purrr::map() method using list columns store model objects get predictions parameter estimates. Usually email creators maintainers car, already emailed multiple times code problems/queries trying get car::Boot() work non-linear least squares regressions, decided try find --painful workaround.","code":"# load in data data(\"chlorella_tpc\")  # keep just a single curve d <- filter(chlorella_tpc, curve_id <= 3)  # fit d_fits <- nest(d, data = c(rate, temp)) %>%   mutate(gaussian = map(data, ~nls_multstart(rate ~ gaussian_1987(temp, rmax, topt, a),                                              data = .x,                                              iter = c(3,3,3),                                              start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 1,                                              start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 1,                                              lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                                              upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                                              supp_errors = 'Y',                                              convergence_count = FALSE)))  # create high resolution predictions d_preds <- mutate(d_fits, new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100)))) %>%   select(., -data) %>%   mutate(preds = map2(gaussian, new_data, ~augment(.x, newdata = .y))) %>%   select(curve_id, growth_temp, process, flux, preds) %>%   unnest(preds)  # show the data ggplot(d, aes(temp, rate)) +   geom_point(size = 2) +   geom_line(aes(temp, .fitted), d_preds) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Metabolic rate across temperatures') +   facet_wrap(~curve_id) # get coefs d_fits <- mutate(d_fits, coefs = map(gaussian, coef))  # fit with nlsLM instead d_fits <- mutate(d_fits, nls_fit = map2(data, coefs, ~nlsLM(rate ~ gaussian_1987(temp, rmax, topt, a),                                         data = .x,                                         start = .y,                                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'))))  head(d_fits) #> # A tibble: 3 × 8 #>   curve_id growth_temp process     flux        data     gaussian coefs  nls_fit #>      <dbl>       <dbl> <chr>       <chr>       <list>   <list>   <list> <list>  #> 1        1          20 acclimation respiration <tibble> <nls>    <dbl>  <nls>   #> 2        2          20 acclimation respiration <tibble> <nls>    <dbl>  <nls>   #> 3        3          23 acclimation respiration <tibble> <nls>    <dbl>  <nls>  d_fits$nls_fit[[1]] #> Nonlinear regression model #>   model: rate ~ gaussian_1987(temp, rmax, topt, a) #>    data: .x #>   rmax   topt      a  #>  1.497 36.338  7.206  #>  residual sum-of-squares: 0.961 #>  #> Number of iterations to convergence: 1  #> Achieved convergence tolerance: 1.49e-08 # try and bootstrap # THIS BREAKS d_fits <- mutate(d_fits, bootstrap = map(nls_fit, ~Boot(.x, method = 'residual'))) #> Error in `mutate()`: #> ℹ In argument: `bootstrap = map(nls_fit, ~Boot(.x, method = #>   \"residual\"))`. #> Caused by error in `map()`: #> ℹ In index: 1. #> Caused by error: #> ! object '.x' not found"},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_many_curves.html","id":"the-solution","dir":"Articles","previous_headings":"","what":"The solution","title":"Bootstrapping many curves using rTPC","text":"Instead creating list column mutate() map(), can create empty list column run loop run Boot() model list column dataframe. can just place result Boot() right place empty list column. error comes actual model fit, need run nlsLM() model time. really like approach found powerful numerous times now. Voila! now list column bootstrapped parameter estimates model. now possible things pipeline. Firstly, can get 95% confidence intervals around predictions. heavily borrows code vignette(\"bootstrapping_models\"), little laborious applying list column. function defined prettiest exactly job vignette(\"bootstrapping_models\").  Second, can calculate confidence intervals estimated parameters explicitly modelled regression.  Finally, can redo car::Boot() procedure, time use calc_params() bootstrap confidence intervals extra parameters \\(T_{opt}\\) \\(r_{max}\\). reasons currently understand, Boot() calc_params() calculates activation energy, deactivation energy, q10 using method = case method = residual, actually recommended bootstrap parameters models explicitly included model formula anyway.","code":"# create empty list column d_fits <- mutate(d_fits, bootstrap = list(rep(NA, n())))  # run for loop to bootstrap each refitted model for(i in 1:nrow(d_fits)){   temp_data <- d_fits$data[[i]]   temp_fit <- nlsLM(rate ~ gaussian_1987(temp, rmax, topt, a),                data = temp_data,                start = d_fits$coefs[[i]],                lower = get_lower_lims(temp_data$temp, temp_data$rate, model_name = 'gaussian_1987'),                upper = get_upper_lims(temp_data$temp, temp_data$rate, model_name = 'gaussian_1987'))   boot <- Boot(temp_fit, method = 'residual')   d_fits$bootstrap[[i]] <- boot   rm(list = c('temp_fit', 'temp_data', 'boot')) }  d_fits #> # A tibble: 3 × 9 #>   curve_id growth_temp process   flux  data     gaussian coefs nls_fit bootstrap #>      <dbl>       <dbl> <chr>     <chr> <list>   <list>   <lis> <list>  <list>    #> 1        1          20 acclimat… resp… <tibble> <nls>    <dbl> <nls>   <boot>    #> 2        2          20 acclimat… resp… <tibble> <nls>    <dbl> <nls>   <boot>    #> 3        3          23 acclimat… resp… <tibble> <nls>    <dbl> <nls>   <boot> # get the raw values of each bootstrap d_fits <- mutate(d_fits, output_boot = map(bootstrap, function(x) x$t))  # calculate predictions with a gnarly written function d_fits <- mutate(d_fits, preds = map2(output_boot, data, function(x, y){   temp <- as.data.frame(x) %>%     drop_na() %>%     mutate(iter = 1:n()) %>%     group_by_all() %>%     do(data.frame(temp = seq(min(y$temp), max(y$temp), length.out = 100))) %>%     ungroup() %>%     mutate(pred = gaussian_1987(temp, rmax, topt, a))   return(temp) }))  # select, unnest and calculate 95% CIs of predictions boot_conf_preds <- select(d_fits, curve_id, preds) %>%   unnest(preds) %>%   group_by(curve_id, temp) %>%   summarise(conf_lower = quantile(pred, 0.025),             conf_upper = quantile(pred, 0.975),             .groups = 'drop')  ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot_conf_preds, fill = 'blue', alpha = 0.3) +   geom_point(aes(temp, rate), d, size = 2) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Rate') +   facet_wrap(~curve_id) # get tidied parameters using broom::tidy # get confidence intervals of parameters d_fits <- mutate(d_fits, params = map(nls_fit, broom::tidy),                  cis = map(bootstrap, function(x){                    temp <- confint(x, method = 'bca') %>%                      as.data.frame() %>%                      rename(conf_lower = 1, conf_upper = 2) %>%                      rownames_to_column(., var = 'term')                    return(temp)                    }))  # join parameter and confidence intervals in the same dataset  left_join(select(d_fits, curve_id, growth_temp, flux, params) %>% unnest(params),           select(d_fits, curve_id, growth_temp, flux, cis) %>% unnest(cis)) %>%   ggplot(., aes(curve_id, estimate)) +   geom_point(size = 4) +   geom_linerange(aes(ymin = conf_lower, ymax = conf_upper)) +   theme_bw() +   facet_wrap(~term, scales = 'free') #> Joining with `by = join_by(curve_id, growth_temp, flux, term)` # create empty list column d_fits <- mutate(d_fits, ci_extra_params = list(rep(NA, n())))  # run for loop to bootstrap extra params from each model for(i in 1:nrow(d_fits)){   temp_data <- d_fits$data[[i]]   temp_fit <- nlsLM(rate ~ gaussian_1987(temp, rmax, topt, a),                data = temp_data,                start = d_fits$coefs[[i]],                lower = get_lower_lims(temp_data$temp, temp_data$rate, model_name = 'gaussian_1987'),                upper = get_upper_lims(temp_data$temp, temp_data$rate, model_name = 'gaussian_1987'))   boot <- Boot(temp_fit, f = function(x){unlist(calc_params(x))}, labels = names(calc_params(temp_fit)), R = 20, method = 'case') %>%   confint(., method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param')   d_fits$ci_extra_params[[i]] <- boot   rm(list = c('temp_fit', 'temp_data', 'boot')) } #>  #>  Number of bootstraps was 16 out of 20 attempted #>  #>  Number of bootstraps was 15 out of 20 attempted #>  #>  Number of bootstraps was 14 out of 20 attempted  # calculate extra params for each model and put in long format to begin with d_fits <- mutate(d_fits, extra_params = map(nls_fit, function(x){calc_params(x) %>% pivot_longer(everything(), names_to =  'param', values_to = 'estimate')}))  left_join(select(d_fits, curve_id, growth_temp, flux, extra_params) %>% unnest(extra_params),           select(d_fits, curve_id, growth_temp, flux, ci_extra_params) %>% unnest(ci_extra_params)) %>%   ggplot(., aes(as.character(curve_id), estimate)) +   geom_point(size = 4) +   geom_linerange(aes(ymin = conf_lower, ymax = conf_upper)) +   theme_bw() +   labs(y = 'estimate', x = \"curve id\") +   facet_wrap(~param, scales = 'free') +   labs(title = 'Calculation of confidence intervals for extra parameters') #> Joining with `by = join_by(curve_id, growth_temp, flux, param)`"},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_many_curves.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Bootstrapping many curves using rTPC","text":"https://artowen.su.domains/courses/305a/FoxOnBootingRegInR.pdf .C. Davison & D.V. Hinkley (2003) Bootstrap Methods Application. - https://www.cambridge.org/core/books/bootstrap-methods---application/ED2FD043579F27952363566DC09CBD6A Schenker, N., & Gentleman, J. F. (2001). judging significance differences examining overlap confidence intervals. American Statistician, 55(3), 182-186. Puth, M. T., Neuhäuser, M., & Ruxton, G. D. (2015). variety methods calculating confidence intervals bootstrapping. Journal Animal Ecology, 84(4), 892-897.","code":""},{"path":[]},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_models.html","id":"things-to-consider","dir":"Articles","previous_headings":"","what":"Things to consider","title":"Bootstrapping using rTPC","text":"(Non-parametric) bootstrapping robust way computing parameter model prediction confidence intervals. Case resampling involves resampling actual data replacement refitting model new, simulated datasets. fewer data points-per-curve, resampling whole dataset replacement may result resampled datasets points beyond optimum temperature. instances, residual sampling - creating new datasets mean centred residuals original model fit - provides alternative case resampling. resampling methods sensitive number unique data points mathematical model used. Bootstrapping can allow differences explicitly modelled calculated parameters evaluated. calculated properly, non-overlapping confidence intervals parameters can indicate significant differences curves.","code":"# load packages library(boot) library(car) library(rTPC) library(nls.multstart) library(broom) library(tidyverse) library(patchwork) library(minpack.lm)"},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_models.html","id":"case-resampling-resampling-the-original-data-with-replacement","dir":"Articles","previous_headings":"","what":"Case resampling: Resampling the original data with replacement","title":"Bootstrapping using rTPC","text":"Bootstrapping involves simulating “new” datasets produced existing data sampling replacement. model fitted separately individual bootstrapped dataset. allows us visualise uncertainty predictions produce confidence intervals estimated parameters. First, demonstrate case resampling approach using data recent paper Padfield et al. (2020), measures thermal performance bacteria, Pseudomonas fluorescens, presence absence phage, \\(\\phi 2\\). study, single growth rate estimate technical replicate, coming isogenic strain bacteria either inoculated , without, phage. , data points within phage treatment can used estimate curve rep column chlorella_tpc dataset. can visualise one curves (bacteria absence phage), using ggplot2.  study, can fit Sharpe-Schoolfield model data plot predictions using approaches vignette(rTPC) vignette(fit_many_models). best fit data. want confidence bands around prediction, can get resampling data number times. R package car contains function Boot() provides wrapper widely used function boot::boot() tailored bootstrapping regression models. nls_multstart() designed fit models across wide possible parameter space, samples multiple start parameters model, using bootstrapping becomes computationally expensive. Instead, refit model using minpack.lm::nlsLM(), using coefficients nls_multstart() start values. Boot() function refits model 999 times stores model coefficients. parameters bootstrapped refit returned. methods available boot() Boot() supported objects. includes hist.boot() look distribution parameter.  can easily create predictions models confidence intervals around original fitted predictions. can plot (1) bootstrapped fits (2) confidence regions around model predictions.  method works well , many points beyond optimum temperature multiple independent points temperature. method becomes problematic small sample size coverage temperature values beyond optimum temperature small. means many bootstrapped models points beyond optimum, problematic mathematical models expect unimodal shape. effect can seen case resampling curve chlorella_tpc dataset used throughout vignettes. fit model using nls_multstart(), refit model using nlsLM(), bootstrap model using Boot(). can create predictions bootstrapped model calculate 95% confidence intervals around predictions. Models don’t fit return NA parameter estimates dropped.  can seen, bootstrapping--replacement single point temperature can lead large variety fits. second panel, can see variation curve fits, clustering around 4 possible paths decrease rate beyond optimum temperature. occurs many instances points sampled high temperatures, leading clustering curve fits.","code":"# load in data data(\"bacteria_tpc\")  # keep just a single curve d <- filter(bacteria_tpc, phage == 'nophage')  # show the data ggplot(d, aes(temp, rate)) +   geom_point(size = 2, alpha = 0.5) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures') # fit Sharpe-Schoolfield model d_fit <- nest(d, data = c(temp, rate)) %>%   mutate(sharpeschoolhigh = map(data, ~nls_multstart(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                         data = .x,                         iter = c(3,3,3,3),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          # create new temperature data          new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100))),          # predict over that data,          preds =  map2(sharpeschoolhigh, new_data, ~augment(.x, newdata = .y)))  # unnest predictions d_preds <- select(d_fit, preds) %>%   unnest(preds)  # plot data and predictions ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_point(aes(temp, rate), d, size = 2, alpha = 0.5) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures') # refit model using nlsLM fit_nlsLM <- minpack.lm::nlsLM(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                         data = d,                         start = coef(d_fit$sharpeschoolhigh[[1]]),                         lower = get_lower_lims(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981'),                         upper = get_upper_lims(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981'),                         weights = rep(1, times = nrow(d)))  # bootstrap using case resampling boot1 <- Boot(fit_nlsLM, method = 'case')  # look at the data head(boot1$t) #>         r_tref         e       eh       th #> [1,] 0.3029299 0.6146874 2.528422 32.47639 #> [2,] 0.2453873 0.8861052 2.364210 29.77357 #> [3,] 0.3036737 0.6834247 2.299114 31.08185 #> [4,] 0.2141809 1.1114502 2.375178 27.99414 #> [5,] 0.2840736 0.7499155 2.366436 30.70785 #> [6,] 0.2044722 1.1842967 2.364180 27.48222 hist(boot1, layout = c(2,2)) # create predictions of each bootstrapped model boot1_preds <- boot1$t %>%   as.data.frame() %>%   drop_na() %>%   mutate(iter = 1:n()) %>%   group_by_all() %>%   do(data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100))) %>%   ungroup() %>%   mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 15))  # calculate bootstrapped confidence intervals boot1_conf_preds <- group_by(boot1_preds, temp) %>%   summarise(conf_lower = quantile(pred, 0.025),             conf_upper = quantile(pred, 0.975)) %>%   ungroup()  # plot bootstrapped CIs p1 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot1_conf_preds, fill = 'blue', alpha = 0.3) +   geom_point(aes(temp, rate), d, size = 2, alpha = 0.5) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures')  # plot bootstrapped predictions p2 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_line(aes(temp, pred, group = iter), boot1_preds, col = 'blue', alpha = 0.007) +   geom_point(aes(temp, rate), d, size = 2, alpha = 0.5) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures')  p1 + p2 # load in chlorella data data('chlorella_tpc')   d2 <- filter(chlorella_tpc, curve_id == 1)  # fit Sharpe-Schoolfield model to raw data d_fit <- nest(d2, data = c(temp, rate)) %>%   mutate(sharpeschoolhigh = map(data, ~nls_multstart(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                         data = .x,                         iter = c(3,3,3,3),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          # create new temperature data          new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100))),          # predict over that data,          preds =  map2(sharpeschoolhigh, new_data, ~augment(.x, newdata = .y)))  # refit model using nlsLM fit_nlsLM2 <- nlsLM(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                         data = d2,                         start = coef(d_fit$sharpeschoolhigh[[1]]),                         lower = get_lower_lims(d2$temp, d2$rate, model_name = 'sharpeschoolhigh_1981'),                         upper = get_upper_lims(d2$temp, d2$rate, model_name = 'sharpeschoolhigh_1981'),                         control = nls.lm.control(maxiter=500),                         weights = rep(1, times = nrow(d2)))  # bootstrap using case resampling boot2 <- Boot(fit_nlsLM2, method = 'case') #>  #>  Number of bootstraps was 983 out of 999 attempted Number of bootstraps was 994 out of 999 attempted # unnest predictions of original model fit d_preds <- select(d_fit, preds) %>%   unnest(preds)  # predict over new data boot2_preds <- boot2$t %>%   as.data.frame() %>%   drop_na() %>%   mutate(iter = 1:n()) %>%   group_by_all() %>%   do(data.frame(temp = seq(min(d2$temp), max(d2$temp), length.out = 100))) %>%   ungroup() %>%   mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 15))  # calculate bootstrapped confidence intervals boot2_conf_preds <- group_by(boot2_preds, temp) %>%   summarise(conf_lower = quantile(pred, 0.025),             conf_upper = quantile(pred, 0.975)) %>%   ungroup()  # plot bootstrapped CIs p1 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot2_conf_preds, fill = 'blue', alpha = 0.3) +   geom_point(aes(temp, rate), d2, size = 2) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures')  # plot bootstrapped predictions p2 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_line(aes(temp, pred, group = iter), boot2_preds, col = 'blue', alpha = 0.007) +   geom_point(aes(temp, rate), d2, size = 2) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures')  p1 + p2"},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_models.html","id":"residual-resampling","dir":"Articles","previous_headings":"","what":"Residual resampling","title":"Bootstrapping using rTPC","text":"Case resampling common way thinking bootstrapping. However, bootstrapping ordinary least squares regression models often done using bootstrapping residuals. method - values predictors study remain fixed resampling - especially useful designed experiment values predictors set experimenter. commonly case measuring thermal performance curves. Re-sampling residuals, heart, follows simple set steps: Fit model data point, \\(\\), retain fitted values \\(\\hat{y_{}}\\) residuals, \\(\\hat{e_{}} = y_{} - \\hat{y_{}}\\) data pair, (\\(x_i\\), \\(y_i\\)), \\(x_i\\) measured temperature value, add randomly re-sampled residual, \\(\\hat{e}\\) fitted value \\(\\hat{y_i}\\). becomes new \\(y_i\\) value, \\(y_i = \\hat{y_i} + \\hat{e}\\). new response variable created based random re-allocation variation around original model fit model refit using newly created \\(y_i\\) response variable Repeat steps 2 3 number times method makes assumption original model fit good representation data, error terms model normally distributed independent. model incorrectly specified – example, unmodelled non-linearity, non-constant error variance, outliers – characteristics carry re-sampled data sets. car::Boot() argument allows us easily implement residual resampling instead case resampling.","code":"# bootstrap using residual resampling boot3 <- Boot(fit_nlsLM2, method = 'residual')  # predict over new data boot3_preds <- boot3$t %>%   as.data.frame() %>%   drop_na() %>%   mutate(iter = 1:n()) %>%   group_by_all() %>%   do(data.frame(temp = seq(min(d2$temp), max(d2$temp), length.out = 100))) %>%   ungroup() %>%   mutate(pred = sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref = 15))  # calculate bootstrapped confidence intervals boot3_conf_preds <- group_by(boot3_preds, temp) %>%   summarise(conf_lower = quantile(pred, 0.025),             conf_upper = quantile(pred, 0.975)) %>%   ungroup()  # plot bootstrapped CIs p1 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot3_conf_preds, fill = 'blue', alpha = 0.3) +   geom_point(aes(temp, rate), d2, size = 2) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures')  # plot bootstrapped predictions p2 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'blue') +   geom_line(aes(temp, pred, group = iter), boot3_preds, col = 'blue', alpha = 0.007) +   geom_point(aes(temp, rate), d2, size = 2) +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Growth rate',        title = 'Growth rate across temperatures')  p1 + p2"},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_models.html","id":"calculating-confidence-intervals-of-estimated-and-calculated-parameters","dir":"Articles","previous_headings":"","what":"Calculating confidence intervals of estimated and calculated parameters","title":"Bootstrapping using rTPC","text":"Bootstrapping can used estimate confidence intervals parameters explicitly modelled regression. can compare approaches profiled confidence intervals (using confint-MASS) asymptotic confidence intervals (using nlstools::confint2()). bootstrapped parameter distributions, confint.boot() supports calculation BCa, basic, normal, percentile confidence intervals. use BCa , calculate CIs two models done previously vignette. First bacteria TPC.  panel different explicitly modelled parameter. dashed lines represent 95% intervals profiling method. general, different bootstrap methods similar profiled intervals, parameters . example, r_tref e give wider (asymmetric) confidence intervals using case resampling method. residual method gives estimates similar calculated profiling. Now TPC Chlorella dataset. curve, profiling method failed asymptotic method wide confidence intervals eh. Consequently, hard know bootstrapping methods benchmarked profiling method. Even , can see intervals eh th case resampling method wide (can seen plot model predictions earlier). Meanwhile, residual resampling method gives symmetric estimates, don’t know conservative (give narrower CIs) increase rate false positives used inference. can also bootstrap confidence intervals extra parameters calculated calc_params(). bacteria TPC case resample. can see confidence intervals around certain parameters, e, eh, q10, skewness asymmetrical. modelled subsample original dataset (example, e calculated fitting modified Boltzmann equation points optimum temperature calculated model predictions). interested parameters, recommend using mathematical models contain explicitly formulation. NB Padfield et al. analysis actually uses Bayesian approach fit thermal performance curves, quantify uncertainty, estimate derived parameters. approach powerful flexible, becoming easier use incredible development R package brms. Examples using brms model thermal performance curves can found GitHub repository paper","code":"# First for the bacteria  # get parameters of fitted model param_bact <- broom::tidy(fit_nlsLM) %>%   select(param = term, estimate)  # calculate confidence intervals of models ci_bact1 <- nlstools::confint2(fit_nlsLM, method = 'asymptotic') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'asymptotic') ci_bact2 <- confint(fit_nlsLM) %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'profile') #> Waiting for profiling to be done...  # CIs from case resampling ci_bact3 <- confint(boot1, method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'case bootstrap')  # CIs from residual resampling ci_bact4 <- Boot(fit_nlsLM, method = 'residual') %>%   confint(., method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'residual bootstrap')  ci_bact <- bind_rows(ci_bact1, ci_bact2, ci_bact3, ci_bact4) %>%   left_join(., param_bact) #> Joining with `by = join_by(param)`  # plot ggplot(ci_bact, aes(forcats::fct_relevel(method, c('profile', 'asymptotic')), estimate, col = method)) +   geom_hline(aes(yintercept = conf_lower), linetype = 2, filter(ci_bact, method == 'profile')) +   geom_hline(aes(yintercept = conf_upper), linetype = 2, filter(ci_bact, method == 'profile')) +   geom_point(size = 4) +   geom_linerange(aes(ymin = conf_lower, ymax = conf_upper)) +   theme_bw() +   facet_wrap(~param, scales = 'free') +   scale_x_discrete('', labels = function(x) stringr::str_wrap(x, width = 10)) +   labs(title = 'Calculation of confidence intervals for model parameters',        subtitle = 'For the bacteria TPC; dashed lines are CI of profiling method') # Second for Chlorella data  # get parameters of fitted model param_chlor <- broom::tidy(fit_nlsLM2) %>%   select(param = term, estimate)  # calculate confidence intervals of models ci_chlor1 <- nlstools::confint2(fit_nlsLM2, method = 'asymptotic') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'asymptotic') ci_chlor2 <- nlstools::confint2(fit_nlsLM2, method = 'profile') #> Waiting for profiling to be done... #> Error in prof$getProfile(): number of iterations exceeded maximum of 50 # profiling method fails ci_chlor2 <- mutate(ci_chlor1, method = 'profile',                     conf_lower = NA,                     conf_upper = NA)  # CIs from case resampling ci_chlor3 <- confint(boot2, method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'case bootstrap')  # CIs from residual resampling ci_chlor4 <- confint(boot3, method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'residual bootstrap')  ci_chlor <- bind_rows(ci_chlor1, ci_chlor2, ci_chlor3, ci_chlor4) %>%   full_join(., param_chlor) #> Joining with `by = join_by(param)`  ggplot(ci_chlor, aes(forcats::fct_relevel(method, c('profile', 'asymptotic')), estimate, col = method)) +   geom_point(size = 4) +   geom_linerange(aes(ymin = conf_lower, ymax = conf_upper)) +   theme_bw() +   facet_wrap(~param, scales = 'free') +   scale_x_discrete('', labels = function(x) stringr::str_wrap(x, width = 10)) +   labs(title = 'Calculation of confidence intervals for model parameters',        subtitle = 'For the chlorella TPC; profile method failes') extra_params <- calc_params(fit_nlsLM) %>%   pivot_longer(everything(), names_to =  'param', values_to = 'estimate')  ci_extra_params <- Boot(fit_nlsLM, f = function(x){unlist(calc_params(x))}, labels = names(calc_params(fit_nlsLM)), R = 200, method = 'case') %>%   confint(., method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'case bootstrap')    ci_extra_params <- left_join(ci_extra_params, extra_params) #> Joining with `by = join_by(param)`  ggplot(ci_extra_params, aes(param, estimate)) +   geom_point(size = 4) +   geom_linerange(aes(ymin = conf_lower, ymax = conf_upper)) +   theme_bw() +   facet_wrap(~param, scales = 'free') +   scale_x_discrete('') +   labs(title = 'Calculation of confidence intervals for extra parameters',        subtitle = 'For the bacteria TPC; using case resampling')"},{"path":"https://padpadpadpad.github.io/rTPC/articles/bootstrapping_models.html","id":"further-reading","dir":"Articles","previous_headings":"Calculating confidence intervals of estimated and calculated parameters","what":"Further reading","title":"Bootstrapping using rTPC","text":"https://artowen.su.domains/courses/305a/FoxOnBootingRegInR.pdf .C. Davison & D.V. Hinkley (2003) Bootstrap Methods Application. - https://www.cambridge.org/core/books/bootstrap-methods---application/ED2FD043579F27952363566DC09CBD6A Schenker, N., & Gentleman, J. F. (2001). judging significance differences examining overlap confidence intervals. American Statistician, 55(3), 182-186. Puth, M. T., Neuhäuser, M., & Ruxton, G. D. (2015). variety methods calculating confidence intervals bootstrapping. Journal Animal Ecology, 84(4), 892-897.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/articles/fit_many_curves.html","id":"a-brief-example-of-how-to-fit-many-models-to-multiple-tpcs-using-rtpc-nls-multstart-and-the-tidyverse-","dir":"Articles","previous_headings":"","what":"A brief example of how to fit many models to multiple TPCs using rTPC, nls.multstart and the tidyverse.","title":"Fitting many curves using rTPC","text":"final part general pipeline, demonstrate multiple models can fitted multiple TPCs. Instead picking 24 model formulations demonstrate approach, use 2 models example: gaussian_1987() sharpeschoolhigh_1981(). can demonstrate fitting multiple curves modelling 60 TPCs example dataset rTPC curve example dataset rTPC. TPCs respiration photosynthesis aquatic algae, Chlorella vulgaris. algae differed growth temperature, growth_temp, long grown temperature, process, either ~100 ~10 generations. Using similar approach vignette('fit_many_models'), models can fitted curve using list columns purrr::map() fit store multiple models data frame. fitting lots models , useful know progress code may take long time run.R package purrr now progress bars built ; can add progress bar map() function using argument .progress. However, fitting multiple models multiple map() calls new progress bar time, currently found way single progress bar multiple map() calls, keep moment. Like previous vignettes, predictions model can estimated using broom::augment(). , first create new list column containing high resolution temperature values taking min max curve. Next stack models finally get new predictions using map2(), allows us use fit new_data list columns. unnesting preds column, left high resolution predictions curve. code covers lot steps, line code commented. can plot predictions curve using ggplot2.  traits thermal performance curve can also easily calculated.","code":"# load packages library(rTPC) library(nls.multstart) library(broom) library(tidyverse) # load in data data(\"chlorella_tpc\") d <- chlorella_tpc  # when scaling up our code to fit hundreds of models, its nice to have a progress bar # edit nls_multstart to allow for a progress bar nls_multstart_progress <- function(formula, data = parent.frame(), iter, start_lower,                                     start_upper, supp_errors = c(\"Y\", \"N\"), convergence_count = 100,                                     control, modelweights, ...){   if(!is.null(pb)){     pb$tick()   }   nls_multstart(formula = formula, data = data, iter = iter, start_lower = start_lower,                  start_upper = start_upper, supp_errors = supp_errors, convergence_count = convergence_count,                  control = control, modelweights = modelweights, ...) }  # start progress bar and estimate time it will take number_of_models <- 2 number_of_curves <- length(unique(d$curve_id))  # setup progress bar pb <- progress::progress_bar$new(total = number_of_curves*number_of_models,                                  clear = FALSE,                                  format =\"[:bar] :percent :elapsedfull\")  # fit two chosen model formulation in rTPC d_fits <- nest(d, data = c(temp, rate)) %>%   mutate(gaussian = map(data, ~nls_multstart_progress(rate~gaussian_1987(temp = temp, rmax,topt,a),                         data = .x,                         iter = c(3,3,3),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          sharpeschoolhigh = map(data, ~nls_multstart_progress(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                         data = .x,                         iter = c(3,3,3,3),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         supp_errors = 'Y',                         convergence_count = FALSE))) [=========================================================] 100% 00:00:40 # create new list column of for high resolution data d_preds <- mutate(d_fits, new_data = map(data, ~tibble(temp = seq(min(.x$temp), max(.x$temp), length.out = 100)))) %>%   # get rid of original data column   select(., -data) %>%   # stack models into a single column, with an id column for model_name   pivot_longer(., names_to = 'model_name', values_to = 'fit', c(gaussian,sharpeschoolhigh)) %>%   # create new list column containing the predictions   # this uses both fit and new_data list columns   mutate(preds = map2(fit, new_data, ~augment(.x, newdata = .y))) %>%   # select only the columns we want to keep   select(curve_id, growth_temp, process, flux, model_name, preds) %>%   # unlist the preds list column   unnest(preds)  glimpse(d_preds) #> Rows: 12,000 #> Columns: 7 #> $ curve_id    <dbl> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… #> $ growth_temp <dbl> 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20… #> $ process     <chr> \"acclimation\", \"acclimation\", \"acclimation\", \"acclimation\"… #> $ flux        <chr> \"respiration\", \"respiration\", \"respiration\", \"respiration\"… #> $ model_name  <chr> \"gaussian\", \"gaussian\", \"gaussian\", \"gaussian\", \"gaussian\"… #> $ temp        <dbl> 16.00000, 16.33333, 16.66667, 17.00000, 17.33333, 17.66667… #> $ .fitted     <dbl> 0.02790076, 0.03175769, 0.03607053, 0.04088150, 0.04623512… # plot ggplot(d_preds) +   geom_line(aes(temp, .fitted, col = model_name)) +   geom_point(aes(temp, rate), d) +   facet_wrap(~curve_id, scales = 'free_y', ncol = 6) +   theme_bw() +   theme(legend.position = 'none') +   scale_color_brewer(type = 'qual', palette = 2) +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'All fitted thermal performance curves',        subtitle = 'gaussian in green; sharpeschoolhigh in orange') # stack models and calculate extra params d_params <- pivot_longer(d_fits, names_to = 'model_name', values_to = 'fit', c(gaussian,sharpeschoolhigh)) %>%   mutate(params = map(fit, calc_params)) %>%   select(curve_id, growth_temp, process, flux, model_name, params) %>%   unnest(params)  glimpse(d_params) #> Rows: 120 #> Columns: 16 #> $ curve_id              <dbl> 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, … #> $ growth_temp           <dbl> 20, 20, 20, 20, 23, 23, 27, 27, 27, 27, 30, 30, … #> $ process               <chr> \"acclimation\", \"acclimation\", \"acclimation\", \"ac… #> $ flux                  <chr> \"respiration\", \"respiration\", \"respiration\", \"re… #> $ model_name            <chr> \"gaussian\", \"sharpeschoolhigh\", \"gaussian\", \"sha… #> $ rmax                  <dbl> 1.4972473, 1.8127063, 1.7935416, 1.9798352, 0.94… #> $ topt                  <dbl> 36.338, 41.646, 35.554, 39.007, 34.615, 35.170, … #> $ ctmin                 <dbl> 18.695, 2.539, 18.835, 6.086, 17.368, 11.970, 15… #> $ ctmax                 <dbl> 53.981, 45.558, 52.272, 47.680, 51.861, 53.064, … #> $ e                     <dbl> 0.6758954, 0.5802496, 0.8427748, 0.6621701, 1.02… #> $ eh                    <dbl> 1.0767824, 11.4840311, 1.0954099, 2.4774826, 1.1… #> $ q10                   <dbl> 2.373766, 2.063147, 2.927011, 2.305129, 3.722119… #> $ thermal_safety_margin <dbl> 17.643, 3.912, 16.718, 8.673, 17.246, 17.894, 18… #> $ thermal_tolerance     <dbl> 35.286, 43.019, 33.437, 41.594, 34.493, 41.094, … #> $ breadth               <dbl> 9.651, 5.371, 9.165, 6.495, 9.442, 7.714, 10.354… #> $ skewness              <dbl> -4.008871e-01, -1.090378e+01, -2.526351e-01, -1.…"},{"path":[]},{"path":"https://padpadpadpad.github.io/rTPC/articles/fit_many_models.html","id":"things-to-consider","dir":"Articles","previous_headings":"","what":"Things to consider","title":"Fitting many models with rTPC","text":"many data points curve? fit 49 models rTPC, needs minimum 7 points per curve. multiple individual curves fit, makes sense data long format, grouping variables (e.g. unique curve identifier), temperature rate columns. negative rate values? curve crosses x axis, might beneficial consider models capable modelling negative values. specific parameters interested ? , may beneficial consider models explicitly include parameter formulation. searching literature, rTPC contains 49 different model formulations previously used. first vignette, demonstrated easily fit single model single curve, fit 49 model formulations. DISCLAIMER Although fit 49 model formulations, demonstrate fit general shape, recommend model selection 49 model formulations. SERIOUSLY, PLEASE . can demonstrate fitting procedure 49 model formulations taking single curve example dataset rTPC - dataset 60 TPCs respiration photosynthesis aquatic algae, Chlorella vulgaris. can plot data using ggplot2  fitting multiple models, take advantage list columns functionality provided purrr. great introduction “Many Models” Chapter R Data Science. single curve, nest dataframe, creating list column contains temperature rate values. create separate columns model fit using purrr::map(). , use gridstart approach fitting models nls_multstart(). method creates combination start parameters, equally spaced across starting parameter bounds. can specified vector length number parameters, c(5, 5, 5) 3 estimated parameters yield 125 iterations. gives us dataframe grouping variables curve_id, growth_temp, process, flux first (used , demonstrate can scaled multiple curves). Next data column contains temperature rate data. column models. column containing model stores actual model fit. parameters model fit can extracted using broom::tidy(). However, model parameters different meanings, may useful instance. predictions model can estimated using broom::augment(). can done models models stacked long format. create smooth curve fit, predictions done new temperature vector 100 points temperature range. predictions model formulation visualised ggplot2.","code":"# load packages library(rTPC) library(nls.multstart) library(broom) library(tidyverse)  # write function to label ggplot2 panels label_facets_num <- function(string){   len <- length(string)   string = paste('(', 1:len, ') ', string, sep = '')   return(string) } # load in data data(\"chlorella_tpc\")  # keep just a single curve d <- filter(chlorella_tpc, curve_id == 1)  # show the data ggplot(d, aes(temp, rate)) +   geom_point() +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Respiration across temperatures') # fit every model formulation in rTPC d_fits <- nest(d, data = c(temp, rate)) %>%   mutate(analytis = map(data, ~nls_multstart(rate~analytiskontodimas_2004(temp = temp, a, tmin, tmax),                         data = .x,                         iter = c(6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'analytiskontodimas_2004') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'analytiskontodimas_2004') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'analytiskontodimas_2004'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'analytiskontodimas_2004'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          ashrafi1 = map(data, ~nls_multstart(rate~ashrafi1_2018(temp = temp, a, b, c),                         data = .x,                         iter = c(6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi1_2018') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi1_2018') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ashrafi1_2018'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ashrafi1_2018'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          ashrafi2 = map(data, ~nls_multstart(rate~ashrafi2_2018(temp = temp, a, b, c),                         data = .x,                         iter = c(6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi2_2018') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi2_2018') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ashrafi2_2018'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ashrafi2_2018'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          ashrafi3 = map(data, ~nls_multstart(rate~ashrafi3_2018(temp = temp, a, b, c),                         data = .x,                         iter = c(6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi3_2018') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi3_2018') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ashrafi3_2018'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ashrafi3_2018'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          ashrafi4 = map(data, ~nls_multstart(rate~ashrafi4_2018(temp = temp, a, b, c, d),                         data = .x,                         iter = c(6,6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi4_2018') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi4_2018') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ashrafi4_2018'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ashrafi4_2018'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          ashrafi5 = map(data, ~nls_multstart(rate~ashrafi5_2018(temp = temp, a, b, c, d),                         data = .x,                         iter = c(6,6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi5_2018') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ashrafi5_2018') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ashrafi5_2018'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ashrafi5_2018'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          atkin = map(data, ~nls_multstart(rate~atkin_2005(temp = temp, r0, a, b),                         data = .x,                         iter = c(6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'atkin_2005') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'atkin_2005') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'atkin_2005'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'atkin_2005'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          beta = map(data, ~nls_multstart(rate~beta_2012(temp = temp, a, b, c, d, e),                         data = .x,                         iter = c(6,6,6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'beta_2012') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'beta_2012') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'beta_2012'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'beta_2012'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          betasimple = map(data, ~nls_multstart(rate~betatypesimplified_2008(temp = temp, rho, alpha, beta),                         data = .x,                         iter = c(6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'betatypesimplified_2008') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'betatypesimplified_2008') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'betatypesimplified_2008'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'betatypesimplified_2008'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          boatman = map(data, ~nls_multstart(rate~boatman_2017(temp = temp, rmax, tmin, tmax, a,b),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'boatman_2017') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'boatman_2017') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'boatman_2017'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'boatman_2017'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          briere1 = map(data, ~nls_multstart(rate~briere1_1999(temp = temp, tmin, tmax, a),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briere1_1999') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briere1_1999') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briere1_1999'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briere1_1999'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          briere1simple = map(data, ~nls_multstart(rate~briere1simplified_1999(temp = temp, tmin, tmax, a),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briere1simplified_1999') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briere1simplified_1999') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briere1simplified_1999'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briere1simplified_1999'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          briere2 = map(data, ~nls_multstart(rate~briere2_1999(temp = temp, tmin, tmax, a,b),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briere2_1999') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briere2_1999') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briere2_1999'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briere2_1999'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          briere2simple = map(data, ~nls_multstart(rate~briere2simplified_1999(temp = temp, tmin, tmax, a,b),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briere2simplified_1999') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briere2simplified_1999') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briere2simplified_1999'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briere2simplified_1999'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          briereextend = map(data, ~nls_multstart(rate~briereextended_2021(temp = temp, tmin, tmax, a, b, d),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briereextended_2021') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briereextended_2021') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briereextended_2021'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briereextended_2021'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          briereextendsimple = map(data, ~nls_multstart(rate~briereextendedsimplified_2021(temp = temp, tmin, tmax, a, b, d),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'briereextendedsimplified_2021') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'briereextendedsimplified_2021') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'briereextendedsimplified_2021'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'briereextendedsimplified_2021'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          delong = map(data, ~nls_multstart(rate~delong_2017(temp = temp, c, eb, ef, tm, ehc),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'delong_2017') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'delong_2017') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'delong_2017'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'delong_2017'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          deutsch = map(data, ~nls_multstart(rate~deutsch_2008(temp = temp, rmax, topt, ctmax, a),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'deutsch_2008') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'deutsch_2008') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'deutsch_2008'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'deutsch_2008'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          eubank = map(data, ~nls_multstart(rate~eubank_1973(temp = temp, topt, a, b),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'eubank_1973') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'eubank_1973') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'eubank_1973'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'eubank_1973'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          flextpc = map(data, ~nls_multstart(rate~flextpc_2024(temp = temp, tmin, tmax, rmax, alpha, beta),                         data = .x,                         iter = c(5,5,5,5,5),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'flextpc_2024') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'flextpc_2024') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'flextpc_2024'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'flextpc_2024'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          flinn = map(data, ~nls_multstart(rate~flinn_1991(temp = temp, a, b, c),                         data = .x,                         iter = c(5,5,5),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'flinn_1991') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'flinn_1991') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'flinn_1991'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'flinn_1991'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          gaussian = map(data, ~nls_multstart(rate~gaussian_1987(temp = temp, rmax, topt, a),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          gaussianmodified = map(data, ~nls_multstart(rate~gaussianmodified_2006(temp = temp, rmax, topt, a, b),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussianmodified_2006') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussianmodified_2006') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussianmodified_2006'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussianmodified_2006'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          hinshelwood = map(data, ~nls_multstart(rate~hinshelwood_1947(temp = temp, a, e, b, eh),                         data = .x,                         iter = c(5,5,5,5),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'hinshelwood_1947') - 1,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'hinshelwood_1947') + 1,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'hinshelwood_1947'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'hinshelwood_1947'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          janisch1 = map(data, ~nls_multstart(rate~janisch1_1925(temp = temp, m, a, topt),                         data = .x,                         iter = c(5,5,5),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'janisch1_1925') - 1,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'janisch1_1925') + 1,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'janisch1_1925'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'janisch1_1925'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          janisch2 = map(data, ~nls_multstart(rate~janisch2_1925(temp = temp, m, a, b, topt),                         data = .x,                         iter = c(5,5,5,5),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'janisch2_1925') - 1,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'janisch2_1925') + 1,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'janisch2_1925'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'janisch2_1925'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          joehnk = map(data, ~nls_multstart(rate~joehnk_2008(temp = temp, rmax, topt, a, b, c),                         data = .x,                         iter = c(4,4,4,4, 4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'joehnk_2008') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'joehnk_2008') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'joehnk_2008'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'joehnk_2008'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          johnson_lewin = map(data, ~suppressWarnings(nls_multstart(rate~ johnsonlewin_1946(temp = temp, r0, e, eh, topt),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'johnsonlewin_1946') - 1,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'johnsonlewin_1946') + 1,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'johnsonlewin_1946'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'johnsonlewin_1946'),                         supp_errors = 'Y',                         convergence_count = FALSE))),          kamykowski = map(data, ~nls_multstart(rate~kamykowski_1985(temp = temp, tmin, tmax, a, b, c),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'kamykowski_1985') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'kamykowski_1985') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'kamykowski_1985'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'kamykowski_1985'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          lactin2 = map(data, ~nls_multstart(rate~lactin2_1995(temp = temp, a, b, tmax, delta_t),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'lactin2_1995') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'lactin2_1995') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'lactin2_1995'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'lactin2_1995'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          lobry = map(data, ~nls_multstart(rate~lobry_1991(temp = temp, rmax, topt, tmin, tmax),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'lobry_1991') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'lobry_1991') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'lobry_1991'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'lobry_1991'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          mitchell = map(data, ~nls_multstart(rate~mitchell_2009(temp = temp, topt, a, b),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'mitchell_2009') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'mitchell_2009') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'mitchell_2009'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'mitchell_2009'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          oneill = map(data, ~nls_multstart(rate~oneill_1972(temp = temp, rmax, ctmax, topt, q10),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          pawar = map(data, ~nls_multstart(rate~pawar_2018(temp = temp, r_tref, e, eh, topt, tref = 15),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'pawar_2018') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'pawar_2018') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'pawar_2018'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'pawar_2018'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          quadratic = map(data, ~nls_multstart(rate~quadratic_2008(temp = temp, a, b, c),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'quadratic_2008') - 0.5,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'quadratic_2008') + 0.5,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'quadratic_2008'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'quadratic_2008'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          ratkowsky = map(data, ~nls_multstart(rate~ratkowsky_1983(temp = temp, tmin, tmax, a, b),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'ratkowsky_1983') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'ratkowsky_1983') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'ratkowsky_1983'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'ratkowsky_1983'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          rezende = map(data, ~nls_multstart(rate~rezende_2019(temp = temp, q10, a,b,c),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'rezende_2019') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'rezende_2019') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'rezende_2019'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'rezende_2019'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          rosso = map(data, ~nls_multstart(rate~rosso_1993(temp = temp, rmax, topt, tmin, tmax),                   data = d,                   iter = c(3,3,3,3),                   start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'rosso_1993') - 10,                   start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'rosso_1993') + 10,                   lower = get_lower_lims(.x$temp, .x$rate, model_name = 'rosso_1993'),                   upper = get_upper_lims(.x$temp, .x$rate, model_name = 'rosso_1993'),                   supp_errors = 'Y',                   convergence_count = FALSE)),          sharpeschoolfull = map(data, ~nls_multstart(rate~sharpeschoolfull_1981(temp = temp, r_tref,e,el,tl,eh,th, tref = 15),                         data = .x,                         iter = c(4,4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolfull_1981') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolfull_1981') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoolfull_1981'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoolfull_1981'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          sharpeschoolhigh = map(data, ~nls_multstart(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          sharpeschoollow = map(data, ~nls_multstart(rate~sharpeschoollow_1981(temp = temp, r_tref,e,el,tl, tref = 15),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoollow_1981'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          spain = map(data, ~nls_multstart(rate~spain_1982(temp = temp, a,b,c,r0),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'spain_1982') - 1,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'spain_1982') + 1,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'spain_1982'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'spain_1982'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          stinner = map(data, ~nls_multstart(rate~stinner_1974(temp = temp, rmax, topt, a, b),                         data = .x,                         iter = c(6,6,6,6),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'stinner_1974') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'stinner_1974') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'stinner_1974'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'stinner_1974'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          taylorsexton = map(data, ~nls_multstart(rate~taylorsexton_1972(temp = temp, rmax, tmin, topt),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'taylorsexton_1972') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'taylorsexton_1972') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'taylorsexton_1972'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'taylorsexton_1972'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          thomas1 = map(data, ~nls_multstart(rate~thomas_2012(temp = temp, a,b,c,tref),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2012') - 1,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2012') + 2,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'thomas_2012'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'thomas_2012'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          thomas2 = map(data, ~nls_multstart(rate~thomas_2017(temp = temp, a,b,c,d,e),                         data = .x,                         iter = c(3,3,3,3,3),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2017') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'thomas_2017') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'thomas_2017'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'thomas_2017'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          tomlinson = map(data, ~nls_multstart(rate~tomlinsonphillips_2015(temp = temp, a, b, c),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'tomlinsonphillips_2015') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'tomlinsonphillips_2015') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'tomlinsonphillips_2015'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'tomlinsonphillips_2015'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          warrendreyer = map(data, ~nls_multstart(rate~warrendreyer_2006(temp = temp, rmax, topt, a),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'warrendreyer_2006') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'warrendreyer_2006') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'warrendreyer_2006'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'warrendreyer_2006'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          weibull = map(data, ~nls_multstart(rate~weibull_1995(temp = temp, a,topt,b,c),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'weibull_1995') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'weibull_1995') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'weibull_1995'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'weibull_1995'),                         supp_errors = 'Y',                         convergence_count = FALSE))) glimpse(select(d_fits, 1:7)) #> Rows: 1 #> Columns: 7 #> $ curve_id    <dbl> 1 #> $ growth_temp <dbl> 20 #> $ process     <chr> \"acclimation\" #> $ flux        <chr> \"respiration\" #> $ data        <list> [<tbl_df[12 x 2]>] #> $ analytis    <list> [function () , resid, function () , rhs, function () , for… #> $ ashrafi1    <list> [function () , resid, function () , rhs, function () , for… d_fits$beta[[1]] #> Nonlinear regression model #>   model: rate ~ beta_2012(temp = temp, a, b, c, d, e) #>    data: data #>      a      b      c      d      e  #>  1.501 37.829 46.451  6.001  2.584  #>  residual sum-of-squares: 0.6367 #>  #> Number of iterations till stop: 95  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 600. # stack models d_stack <- select(d_fits, -data) %>%   pivot_longer(., names_to = 'model_name', values_to = 'fit', ashrafi1:weibull)  # get parameters using tidy params <- d_stack %>%   mutate(., est = map(fit, tidy)) %>%   select(-fit) %>%   unnest(est)  # get predictions using augment newdata <- tibble(temp = seq(min(d$temp), max(d$temp), length.out = 100)) d_preds <- d_stack %>%   mutate(., preds = map(fit, augment, newdata = newdata)) %>%   select(-fit) %>%   unnest(preds)  # plot ggplot(d_preds, aes(temp, rate)) +   geom_point(aes(temp, rate), d) +   geom_line(aes(temp, .fitted), col = 'blue') +   facet_wrap(~model_name, labeller = labeller(model_name = label_facets_num), scales = 'free', ncol = 5) +   theme_bw(base_size = 12) +   theme(legend.position = 'none',         strip.text = element_text(hjust = 0),         strip.background = element_blank()) +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Fits of every model available in rTPC') +   geom_hline(aes(yintercept = 0), linetype = 2)"},{"path":"https://padpadpadpad.github.io/rTPC/articles/fit_many_models.html","id":"troubleshooting-curve-fits","dir":"Articles","previous_headings":"","what":"Troubleshooting curve fits","title":"Fitting many models with rTPC","text":"fits converge properly, things can try: Turning errors warnings using supp_errors = 'N' inside nls_multstart() help identify potential problems. Change gridstart approach shotgun latin hypercube approach fitting models nls_multstart() Change boundaries start_lower start_upper. fits, just +/- 10 output get_start_vals(). Sometimes change value +/- 1 get reproducible fits. scaling 0.5 times 1.5 times start values might help. Remove lower upper arguments fitting process.","code":""},{"path":[]},{"path":"https://padpadpadpad.github.io/rTPC/articles/model_averaging_selection.html","id":"things-to-consider","dir":"Articles","previous_headings":"","what":"Things to consider","title":"Model selection and model averaging with rTPC","text":"magic bullet model selection model averaging. Think carefully models fit fitting takes place. seems illogical allow poor model ruin prediction, makes sense -weight . advice much ecology takes: average models within \\(\\Delta 2 AIC\\) best model. already pre-selected sensible models 24, may often wiser compute model weights. common procedure economics IPCC earth-system-models. general pipeline demonstrates models can fitted, parameters extracted, predictions plotted single multiple curves using functions rTPC, nls_multstart(), tidyverse. , demonstrate pipeline can easily extended (1) model selection model best supports data chosen (2) model averaging multiple models used make predictions estimating extra parameters, usually weighting model well fit data. Instead picking 24 model formulations demonstrate approaches, picked 5 models different shaped curves (see vignette('fit_many_models')): boatman_2017(), gaussian_1987(), oneill_1972(), quadratic_2008(), rezende_2019(), sharpeschoolhigh_1981() First, fit model formulations single curve example dataset rTPC - dataset 60 TPCs respiration photosynthesis aquatic algae, Chlorella vulgaris. can plot data using ggplot2.  5 models fitted using approach vignette('fit_many_models'), using list columns purrr::map() fit store multiple models data frame. predictions model can estimated using broom::augment(). stacking models long format, can done models . create smooth curve fit, predictions done new temperature vector 100 points temperature range. predictions model formulation visualised ggplot2.  can seen plot, variation different model formulations fit data. can use information theoretic approach compare different models, using measures relative model fit - AIC, BIC, AICc (AIC correcting small sample size). AIC BIC returned broom::glance(), AICc can added using MuMIn::AICc()","code":"# load packages library(rTPC) library(nls.multstart) library(broom) library(tidyverse) library(ggrepel) # load in data data(\"chlorella_tpc\")  # keep just a single curve d <- filter(chlorella_tpc, curve_id == 1)  # show the data ggplot(d, aes(temp, rate)) +   geom_point() +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Respiration across temperatures') # fit five chosen model formulations in rTPC d_fits <- nest(d, data = c(temp, rate)) %>%   mutate(boatman = map(data, ~nls_multstart(rate~boatman_2017(temp = temp, rmax, tmin, tmax, a,b),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'boatman_2017') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'boatman_2017') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'boatman_2017'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'boatman_2017'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          gaussian = map(data, ~nls_multstart(rate~gaussian_1987(temp = temp, rmax, topt, a),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'gaussian_1987') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'gaussian_1987'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          oneill = map(data, ~nls_multstart(rate~oneill_1972(temp = temp, rmax, ctmax, topt, q10),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'oneill_1972') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'oneill_1972'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          quadratic = map(data, ~nls_multstart(rate~quadratic_2008(temp = temp, a, b, c),                         data = .x,                         iter = c(4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'quadratic_2008') - 0.5,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'quadratic_2008') + 0.5,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'quadratic_2008'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'quadratic_2008'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          rezende = map(data, ~nls_multstart(rate~rezende_2019(temp = temp, q10, a,b,c),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'rezende_2019') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'rezende_2019') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'rezende_2019'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'rezende_2019'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          sharpeschoolhigh = map(data, ~nls_multstart(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                         data = .x,                         iter = c(4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') - 10,                         start_upper = get_start_vals(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981') + 10,                         lower = get_lower_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         upper = get_upper_lims(.x$temp, .x$rate, model_name = 'sharpeschoolhigh_1981'),                         supp_errors = 'Y',                         convergence_count = FALSE))) # stack models d_stack <- select(d_fits, -data) %>%   pivot_longer(., names_to = 'model_name', values_to = 'fit', boatman:sharpeschoolhigh)  # get predictions using augment newdata <- tibble(temp = seq(min(d$temp), max(d$temp), length.out = 100)) d_preds <- d_stack %>%   mutate(., preds = map(fit, augment, newdata = newdata)) %>%   select(-fit) %>%   unnest(preds)  # take a random point from each model for labelling d_labs <- filter(d_preds, temp < 30) %>%   group_by(., model_name) %>%   sample_n(., 1) %>%   ungroup()  # plot ggplot(d_preds, aes(temp, .fitted)) +   geom_line(aes(col = model_name)) +   geom_label_repel(aes(temp, .fitted, label = model_name, col = model_name), fill = 'white', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', d_labs) +   geom_point(aes(temp, rate), d) +   theme_bw(base_size = 12) +   theme(legend.position = 'none') +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Respiration across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) +   scale_color_brewer(type = 'qual', palette = 2) d_ic <- d_stack %>%   mutate(., info = map(fit, glance),          AICc =  map_dbl(fit, MuMIn::AICc)) %>%   select(-fit) %>%   unnest(info) %>%   select(model_name, sigma, AIC, AICc, BIC, df.residual) #> Registered S3 method overwritten by 'MuMIn': #>   method        from  #>   nobs.multinom broom  d_ic #> # A tibble: 6 × 6 #>   model_name       sigma    AIC  AICc   BIC df.residual #>   <chr>            <dbl>  <dbl> <dbl> <dbl>       <int> #> 1 boatman          0.274  8.51   25.3 11.4            7 #> 2 gaussian         0.327 11.8    17.5 13.7            9 #> 3 oneill           0.266  7.38   17.4  9.81           8 #> 4 quadratic        0.408 17.1    22.8 19.0            9 #> 5 rezende          0.362 14.8    24.8 17.2            8 #> 6 sharpeschoolhigh 0.198  0.350  10.3  2.77           8"},{"path":"https://padpadpadpad.github.io/rTPC/articles/model_averaging_selection.html","id":"model-selection","dir":"Articles","previous_headings":"","what":"Model selection","title":"Model selection and model averaging with rTPC","text":"instance, use AICc score compare models. model selection approach, model lowest AICc score chosen model best supports data. instance, Sharpe-Schoolfield model.","code":"# filter for best model best_model = filter(d_ic, AICc == min(AICc)) %>% pull(model_name) best_model #> [1] \"sharpeschoolhigh\"  # get colour code col_best_mod = RColorBrewer::brewer.pal(n = 6, name = \"Dark2\")[6]  # plot ggplot(d_preds, aes(temp, .fitted)) +   geom_line(aes(group = model_name), col = 'grey50', alpha = 0.5) +   geom_line(data = filter(d_preds, model_name == best_model), col = col_best_mod) +   geom_label_repel(aes(temp, .fitted, label = model_name), fill = 'white', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', data = filter(d_labs, model_name == best_model), col = col_best_mod) +   geom_point(aes(temp, rate), d) +   theme_bw(base_size = 12) +   theme(legend.position = 'none') +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Respiration across temperatures',        subtitle= 'The Sharpe-Schoolfield model is the best model') +   geom_hline(aes(yintercept = 0), linetype = 2)"},{"path":"https://padpadpadpad.github.io/rTPC/articles/model_averaging_selection.html","id":"model-averaging","dir":"Articles","previous_headings":"","what":"Model averaging","title":"Model selection and model averaging with rTPC","text":"model averaging approach, predictions parameters models averaged. ecology, usually done based model’s weighting. best supported model’s predictions taken account least supported. Often number models reduced setting cut-difference information criterion metric used. common approach keep models within \\(\\Delta 2 AIC\\) best model.  example, obvious model weights, Sharpe-Schoolfield model overwhelmingly supported. plays plot, predictions deviating little predictions based Sharpe-Schoolfield model. Model averaging can also applied calculated extra parameters, optimum temperature maximum rate.","code":"# get model weights # filtering on AIC score is hashtagged out in this example d_ic <- d_ic %>%   # filter(d_ic, aic - min(aic) <= 2) %>%   mutate(., weight = MuMIn::Weights(AICc))  select(d_ic, model_name, weight) %>%   arrange(., desc(weight)) #> # A tibble: 6 × 2 #>   model_name       weight       #>   <chr>            <mdl.wght>   #> 1 sharpeschoolhigh 0.9421542691 #> 2 oneill           0.0280147990 #> 3 gaussian         0.0267513389 #> 4 quadratic        0.0018571357 #> 5 rezende          0.0006903446 #> 6 boatman          0.0005321127  # calculate average prediction ave_preds <- left_join(d_preds, select(d_ic, model_name, weight)) %>%   group_by(temp) %>%   summarise(., .fitted = sum(.fitted*weight)) %>%   ungroup() %>%   mutate(model_name = 'model average') #> Joining with `by = join_by(model_name)`  # create label for averaged predictions d_labs <- filter(ave_preds, temp < 30) %>% sample_n(., 1)  # plot these ggplot(d_preds, aes(temp, .fitted)) +   geom_line(aes(col = model_name), alpha = 0.3) +   geom_line(data = ave_preds, col = 'blue') +   geom_label_repel(aes(label = model_name), fill = 'white', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', data = d_labs, col = 'blue') +   geom_point(aes(temp, rate), d) +   theme_bw(base_size = 12) +   theme(legend.position = 'none') +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Respiration across temperatures',        subtitle= 'Model averaged predictions') +   geom_hline(aes(yintercept = 0), linetype = 2) +   scale_color_brewer(type = 'qual', palette = 2) # calculate estimated parameters params <- d_stack %>%   mutate(., params = map(fit, calc_params)) %>%   select(-fit) %>%   unnest(params)  # get averaged parameters based on model weights ave_params <- left_join(params, select(d_ic, model_name, weight)) %>%   summarise(., across(rmax:skewness, function(x){sum(x*.$weight)})) %>%   mutate(model_name = 'model average') #> Joining with `by = join_by(model_name)`  # show them bind_rows(select(params, model_name, rmax:skewness), ave_params) %>%   mutate_if(is.numeric, round, 2) #> # A tibble: 7 × 12 #>   model_name      rmax  topt ctmin ctmax     e    eh   q10 thermal_safety_margin #>   <chr>          <dbl> <dbl> <dbl> <dbl> <dbl> <dbl> <dbl>                 <dbl> #> 1 boatman         1.58  38.4 13.7   47.9  0.72  1.74  2.48                  9.48 #> 2 gaussian        1.5   36.3 18.7   54.0  0.68  1.08  2.37                 17.6  #> 3 oneill          1.55  37.7 12.1   47.4  0.72  1.74  2.48                  9.69 #> 4 quadratic       1.22  34.3 17.4   51.3  0.68  1.08  2.37                 16.9  #> 5 rezende         1.35  39.5 -3.41  48.7  0.72  1.74  2.48                  9.14 #> 6 sharpeschoolh…  1.81  41.6  2.54  45.6  0.58 11.5   2.06                  3.91 #> 7 model average   1.8   41.4  3.27  45.8  0.59 10.9   2.08                  4.47 #> # ℹ 3 more variables: thermal_tolerance <dbl>, breadth <dbl>, skewness <dbl>"},{"path":"https://padpadpadpad.github.io/rTPC/articles/model_averaging_selection.html","id":"further-reading","dir":"Articles","previous_headings":"","what":"Further reading","title":"Model selection and model averaging with rTPC","text":"Dormann, C. F., Calabrese, J. M., Guillera‐Arroita, G., Matechou, E., Bahn, V., Bartoń, K., … & Guelat, J. (2018). Model averaging ecology: review Bayesian, information‐theoretic, tactical approaches predictive inference. Ecological Monographs, 88(4), 485-504. https://doi.org/10.1002/ecm.1309 Burnham K. P., Anderson, D.R. (2002) Model Selection Multi-Model Inference: Practical Information-Theoretical Approach. 2nd ed. Berlin: Springer. Banner, K. M., & Higgs, M. D. (2017). Considerations assessing model averaging regression coefficients. Ecological Applications, 27(1), 78-93. https://doi.org/10.1002/eap.1419","code":""},{"path":[]},{"path":"https://padpadpadpad.github.io/rTPC/articles/model_weighting.html","id":"things-to-consider","dir":"Articles","previous_headings":"","what":"Things to consider","title":"Model weighting with rTPC","text":"optimal weighting \\(\\frac{1}{\\sigma}\\). standard deviation easy calculate calculating means rate data. level replication? biological replicates technical replicates? non-independence dataset? general pipeline demonstrates models can fitted, parameters extracted, predictions plotted single multiple curves using functions rTPC, nls_multstart(), purrr.","code":"# load packages library(rTPC) library(nls.multstart) library(broom) library(tidyverse) library(ggrepel)"},{"path":"https://padpadpadpad.github.io/rTPC/articles/model_weighting.html","id":"using-model-weights","dir":"Articles","previous_headings":"","what":"Using model weights","title":"Model weighting with rTPC","text":", demonstrate pipeline can easily extended incorporate measurement uncertainty using weights argument nls_multstart(). Methods fitting TPCs literature often fit models averaged rate values temperature. fits model mean rate value, often variation around calculated mean value ignored. However, may spread rate data extreme temperatures (hot cold). Ignoring homoscedasticity data may alter model fit. Instead, can incorporate measurement uncertainty using weights argument within nls_multstart(), perform weighted non-linear least squares regression. optimal weight data point standard deviation, \\(1/\\sigma\\), easily calculated averaging technical biological replicates. can demonstrate weighted non-linear least squares regression using example dataset contained within rTPC - dataset 60 TPCs respiration photosynthesis aquatic algae, Chlorella vulgaris. Instead plotting single curve, average biological replicates, rep, within growth temperature, get mean rate values assay temperature standard deviation. plotted using ggplot2.  example, standard deviation rates actually smallest extreme temperatures, counter previously expected. use workflows outlined previous vignettes fitting many models fitting many curves fit weighted standard non-linear least squares regression, use kamykowski_1985() example - purely used previous vignettes yet. can get predictions plot .  , can see weighting regression standard deviation average rate value temperature increases optimum temperature approximately 2 ºC. big relative shift, big consequences downstream analyses might applied. model weighting approach can easily combined model selection/averaging.","code":"# get curve data data(\"chlorella_tpc\")  d_ave <- filter(chlorella_tpc, process == 'adaptation', growth_temp == 33, flux == 'photosynthesis') %>%   group_by(temp, flux) %>%   summarise(., sd = sd(rate),             ave_rate = mean(rate)) %>%   ungroup() #> `summarise()` has grouped output by 'temp'. You can override using the #> `.groups` argument.  # plot ggplot() +   geom_linerange(aes(x = temp, ymin = ave_rate - sd, ymax = ave_rate + sd), d_ave) +   geom_point(aes(temp, ave_rate), d_ave, size = 2, shape = 21, fill = 'green4') +   theme_bw(base_size = 12) +   theme(legend.position = 'none',         strip.text = element_text(hjust = 0),         strip.background = element_blank()) +   labs(x ='Temperature (ºC)',        y = 'Metabolic rate',        title = 'Photosynthesis rates across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) # fit kamykowski model using rTPC with and without weights d_fits <- nest(d_ave, data = c(temp, ave_rate, sd)) %>%   mutate(standard = map(data, ~nls_multstart(ave_rate~kamykowski_1985(temp = temp, tmin, tmax, a,b,c),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985') - 10,                         start_upper = get_start_vals(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985') + 10,                         lower = get_lower_lims(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985'),                         upper = get_upper_lims(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985'),                         supp_errors = 'Y',                         convergence_count = FALSE)),          weighted = map(data, ~nls_multstart(ave_rate~kamykowski_1985(temp = temp, tmin, tmax, a,b,c),                         data = .x,                         iter = c(4,4,4,4,4),                         start_lower = get_start_vals(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985') - 10,                         start_upper = get_start_vals(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985') + 10,                         lower = get_lower_lims(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985'),                         upper = get_upper_lims(.x$temp, .x$ave_rate, model_name = 'kamykowski_1985'),                         supp_errors = 'Y',                         convergence_count = FALSE,                         # include weights here!                         modelweights = 1/sd)))  d_fits #> # A tibble: 1 × 4 #>   flux           data              standard weighted #>   <chr>          <list>            <list>   <list>   #> 1 photosynthesis <tibble [11 × 3]> <nls>    <nls> # stack models d_stack <- select(d_fits, -data) %>%   pivot_longer(., names_to = 'model_name', values_to = 'fit', standard:weighted)  # get predictions using augment newdata <- tibble(temp = seq(min(d_ave$temp), max(d_ave$temp), length.out = 100)) d_preds <- d_stack %>%   mutate(., preds = map(fit, augment, newdata = newdata)) %>%   select(-fit) %>%   unnest(preds)  # take a random point from each model for labelling d_labs <- filter(d_preds, temp < 30) %>%   group_by(., model_name) %>%   sample_n(., 1) %>%   ungroup()  # get topt for each model d_topt <- mutate(d_stack, topt = map_dbl(fit, get_topt), rmax = map_dbl(fit, get_rmax),                  topt_text = paste(topt, 'ºC', sep = ' '))  # plot ggplot(d_preds) +   geom_line(aes(temp, .fitted, col = model_name)) +   geom_label_repel(aes(temp, .fitted, label = model_name, col = model_name), fill = 'white', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', d_labs) +   geom_linerange(aes(x = temp, ymin = ave_rate - sd, ymax = ave_rate + sd), d_ave) +   geom_point(aes(temp, ave_rate), d_ave, size = 2, shape = 21, fill = 'green4') +   geom_label_repel(aes(topt, rmax, label = topt_text, col = model_name), fill = 'white', nudge_y = 0.8, segment.size = 0.2, segment.colour = 'grey50', d_topt) +   geom_point(aes(topt, rmax, col = model_name), size = 4, d_topt) +   theme_bw(base_size = 12) +   theme(legend.position = 'none') +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Photosynthesis rates across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) +   scale_color_brewer(type = 'qual', palette = 2) +   ylim(c(0, 3))"},{"path":"https://padpadpadpad.github.io/rTPC/articles/rTPC.html","id":"an-introduction-to-rtpc-and-how-it-can-be-used-to-fit-thermal-performance-curves-using-nls-multstart-","dir":"Articles","previous_headings":"","what":"An introduction to rTPC and how it can be used to fit thermal performance curves using nls.multstart.","title":"Introduction to rTPC","text":"rTPC provides suite functions help fit thermal performance curves empirical data. searching literature, rTPC contains 49 different model formulations used previously. functions can easily applied methods R use non-linear least squares regression estimate thermal performance curves. available model formulations can accessed using get_model_names(). generally named author paper (hence name model within literature) year found model first used, separated “_”. original model formulations altered models take temperature degrees centigrade raw rate values input. can demonstrate fitting procedure taking single curve example dataset rTPC - dataset 60 TPCs respiration photosynthesis aquatic algae, Chlorella vulgaris. can plot data using ggplot2  model, rTPC helper functions estimate sensible start values (get_start_vals()), lower (get_lower_lims()) upper (get_upper_lims()) limits. demonstrate , shall use sharpe-schoolfield model high temperature inactivation . One problem methods fitting models R using non-linear least squares regression sensitive choice starting parameters. problem also occurs previous specialist R packages help fit thermal performance curves, devRate temperatureresponse. methods can fail entirely give different parameter estimates multiple runs code. overcome , recommend using R package nls.multstart, uses minpackLM::nlsLM(), allows multiple sets starting parameters. iterates multiple starting values, attempting fit set start parameters. best model picked using AIC scores. Using nls_multstart, use random-search/shotgun approach fit curve. Random start parameter values picked uniform distribution start_lower start_upper parameter. best model improved upon (terms AIC score) 100 new start parameter combinations, function return model fit. controlled convergence_count, set FALSE, nls_multstart() try fit iterations. calculate additional parameters interest, can use rTPC::calc_params(). function uses high resolution predictions fitted model estimate traits associated thermal performance curve. currently available methods can viewed running ?calc_params. example, may interested variation optimum temperature, \\(T_{opt}\\), given adapted algae different temperatures. Finally introduction, can get predictions model using broom::augment(), similar predict(). plotted original data.","code":"# load packages library(rTPC) library(nls.multstart) library(broom) library(tidyverse) get_model_names() #>  [1] \"analytiskontodimas_2004\"       \"ashrafi1_2018\"                 #>  [3] \"ashrafi2_2018\"                 \"ashrafi3_2018\"                 #>  [5] \"ashrafi4_2018\"                 \"ashrafi5_2018\"                 #>  [7] \"atkin_2005\"                    \"beta_2012\"                     #>  [9] \"betatypesimplified_2008\"       \"boatman_2017\"                  #> [11] \"briere1_1999\"                  \"briere1simplified_1999\"        #> [13] \"briere2_1999\"                  \"briere2simplified_1999\"        #> [15] \"briereextended_2021\"           \"briereextendedsimplified_2021\" #> [17] \"delong_2017\"                   \"deutsch_2008\"                  #> [19] \"eubank_1973\"                   \"flextpc_2024\"                  #> [21] \"flinn_1991\"                    \"gaussian_1987\"                 #> [23] \"gaussianmodified_2006\"         \"hinshelwood_1947\"              #> [25] \"janisch1_1925\"                 \"janisch2_1925\"                 #> [27] \"joehnk_2008\"                   \"johnsonlewin_1946\"             #> [29] \"kamykowski_1985\"               \"lactin2_1995\"                  #> [31] \"lobry_1991\"                    \"mitchell_2009\"                 #> [33] \"oneill_1972\"                   \"pawar_2018\"                    #> [35] \"quadratic_2008\"                \"ratkowsky_1983\"                #> [37] \"rezende_2019\"                  \"rosso_1993\"                    #> [39] \"sharpeschoolfull_1981\"         \"sharpeschoolhigh_1981\"         #> [41] \"sharpeschoollow_1981\"          \"spain_1982\"                    #> [43] \"stinner_1974\"                  \"taylorsexton_1972\"             #> [45] \"thomas_2012\"                   \"thomas_2017\"                   #> [47] \"tomlinsonphillips_2015\"        \"warrendreyer_2006\"             #> [49] \"weibull_1995\" # load in data data(\"chlorella_tpc\")  # keep just a single curve d <- filter(chlorella_tpc, curve_id == 1)  # show the data ggplot(d, aes(temp, rate)) +   geom_point() +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Respiration across temperatures') # choose model mod = 'sharpschoolhigh_1981'  # get start vals start_vals <- get_start_vals(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981')  # get limits low_lims <- get_lower_lims(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981') upper_lims <- get_upper_lims(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981')  start_vals #>     r_tref          e         eh         th  #>  0.7485827  0.8681437  2.4861344 43.0000000 low_lims #> r_tref      e     eh     th  #>      0      0      0      1 upper_lims #>    r_tref         e        eh        th  #>  1.616894 10.000000 40.000000 49.000000 # fit model fit <- nls_multstart(rate~sharpeschoolhigh_1981(temp = temp, r_tref,e,eh,th, tref = 15),                                                      data = d,                                                      iter = 500,                                                      start_lower = start_vals - 10,                                                      start_upper = start_vals + 10,                                                      lower = low_lims,                                                      upper = upper_lims,                                                      supp_errors = 'Y')  fit #> Nonlinear regression model #>   model: rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th,     tref = 15) #>    data: data #>  r_tref       e      eh      th  #>  0.2595  0.5826 14.2031 43.5531  #>  residual sum-of-squares: 0.3144 #>  #> Number of iterations to convergence: 21  #> Achieved convergence tolerance: 1.49e-08 # calculate additional traits calc_params(fit) %>%   # round for easy viewing   mutate_all(round, 2) #>   rmax  topt ctmin ctmax    e    eh  q10 thermal_safety_margin #> 1 1.81 41.65  2.54 45.56 0.58 11.48 2.06                  3.91 #>   thermal_tolerance breadth skewness #> 1             43.02    5.37    -10.9 # predict new data new_data <- data.frame(temp = seq(min(d$temp), max(d$temp), 0.5)) preds <- augment(fit, newdata = new_data)  # plot data and model fit ggplot(d, aes(temp, rate)) +   geom_point() +   geom_line(aes(temp, .fitted), preds, col = 'blue') +   theme_bw(base_size = 12) +   labs(x = 'Temperature (ºC)',        y = 'Metabolic rate',        title = 'Respiration across temperatures')"},{"path":[]},{"path":"https://padpadpadpad.github.io/rTPC/articles/weighted_bootstrapping.html","id":"things-to-consider","dir":"Articles","previous_headings":"","what":"Things to consider","title":"Bootstrapping with weights using rTPC","text":"Think carefully level replication (Non-parametric) bootstrapping robust way computing parameter model prediction confidence intervals. Bootstrapping weighted non-linear least squares implemented using car::Boot(), case residual resampling supported outcomes different approaches outlined likely change based data model used. Use methods caution think critically output. model weighting, implemented vignette(model_weighting), standard deviation point can used account measurement uncertainty can improve model fit reduce biases parameter estimates. vignette(bootstrapping_models)`, car::Boot() can used case residual resampling weighted regression model. case resampling, iteration re-samples original data replacement (rate, temperature measurement error value linked) uses weighted weighted non-linear least squares regression bootstrapped dataset. residual resampling weighted non-linear regression, weights used correction Pearson residuals. whole function can viewed using getAnywhere(Boot.nls). large samples residual method must ok, small sample properties less clear. possible, recommend using case resampling bootstrap possible theory certain. demonstrate approaches using example vignette('model_weighting'). vignette uses example dataset contained within rTPC - dataset 60 TPCs respiration photosynthesis aquatic algae, Chlorella vulgaris. Instead plotting single curve, average biological replicates, rep, within growth temperature (photosynthesis cultures adapted 33 ºC), get mean rate values assay temperature standard deviation. plotted using ggplot2. Instead fitting kamykowski_1985, instead fit lactin2_1995 example.","code":"# load packages library(boot) library(car) # to install development version of car install.packages(\"car\", repos = c(\"https://r-forge.r-project.org\"), dep = FALSE) library(rTPC) library(nls.multstart) library(broom) library(tidyverse) library(patchwork) # get curve data data(\"chlorella_tpc\")  d_ave <- filter(chlorella_tpc, process == 'adaptation', growth_temp == 33, flux == 'photosynthesis') %>%   group_by(temp, flux) %>%   summarise(., sd = sd(rate),             ave_rate = mean(rate),             groups = 'drop') #> `summarise()` has grouped output by 'temp'. You can override using the #> `.groups` argument.  d_fit <- nest(d_ave, data = c(temp, ave_rate, sd)) %>%   mutate(weighted = map(data, ~nls_multstart(ave_rate~lactin2_1995(temp = temp, a, b, tmax, delta_t),                         data = .x,                         iter = c(3,3,3,3),                         start_lower = get_start_vals(.x$temp, .x$ave_rate, model_name = 'lactin2_1995') - 10,                         start_upper = get_start_vals(.x$temp, .x$ave_rate, model_name = 'lactin2_1995') + 10,                         lower = get_lower_lims(.x$temp, .x$ave_rate, model_name = 'lactin2_1995'),                         upper = get_upper_lims(.x$temp, .x$ave_rate, model_name = 'lactin2_1995'),                         supp_errors = 'Y',                         convergence_count = FALSE,                         # include weights here!                         modelweights = 1/sd)))  # get predictions using augment newdata <- tibble(temp = seq(min(d_ave$temp), max(d_ave$temp), length.out = 100)) d_preds <- d_fit %>%   mutate(., preds = map(weighted, augment, newdata = newdata)) %>%   select(-weighted) %>%   unnest(preds)  # plot ggplot() +   geom_line(aes(temp, .fitted), d_preds) +   geom_linerange(aes(x = temp, ymin = ave_rate - sd, ymax = ave_rate + sd), d_ave) +   geom_point(aes(temp, ave_rate), d_ave, size = 2, shape = 21, fill = 'green4') +   theme_bw(base_size = 12) +   theme(legend.position = 'none',         strip.text = element_text(hjust = 0),         strip.background = element_blank()) +   labs(x ='Temperature (ºC)',        y = 'Metabolic rate',        title = 'Photosynthesis rates across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) +   ylim(c(-0.25, 3.5))"},{"path":"https://padpadpadpad.github.io/rTPC/articles/weighted_bootstrapping.html","id":"method-1-case-resampling-weighted-non-linear-regression-","dir":"Articles","previous_headings":"","what":"Method 1: Case resampling weighted non-linear regression.","title":"Bootstrapping with weights using rTPC","text":"method, iteration re-samples original data replacement (rate, temperature measurement error value linked) uses weighted non-linear least squares regression bootstrapped dataset. can also create model predictions bootstrap confidence intervals model predictions using methods implemented vignette(bootstrapping_models). can plotted using ggplot2.  model formulation, case resampling method gives extremely wide confidence intervals model predictions high temperatures. bootstrapped datasets, rate value 49 ºC sampled, results drastically different fit predicts extremely negative rates 49 ºC. likely problem models allow negative rates, datasets small single points temperature.","code":"# refit model using nlsLM fit_nlsLM <- minpack.lm::nlsLM(ave_rate~lactin2_1995(temp = temp, a, b, tmax, delta_t),                         data = d_ave,                         start = coef(d_fit$weighted[[1]]),                         lower = get_lower_lims(d_ave$temp, d_ave$ave_rate, model_name = 'lactin2_1995'),                         upper = get_upper_lims(d_ave$temp, d_ave$ave_rate, model_name = 'lactin2_1995'),                         weights = 1/sd)  # perform case bootstrap boot1 <- Boot(fit_nlsLM, method = 'case') #>  #>  Number of bootstraps was 674 out of 999 attempted # predict over new data boot1_preds <- boot1$t %>%   as.data.frame() %>%   drop_na() %>%   mutate(iter = 1:n()) %>%   group_by_all() %>%   do(data.frame(temp = seq(min(d_ave$temp), max(d_ave$temp), length.out = 100))) %>%   ungroup() %>%   mutate(pred = lactin2_1995(temp, a, b, tmax, delta_t))  # calculate bootstrapped confidence intervals boot1_conf_preds <- group_by(boot1_preds, temp) %>%   summarise(conf_lower = quantile(pred, 0.025),             conf_upper = quantile(pred, 0.975),             .groups = 'drop')  # plot bootstrapped CIs p1 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'black') +   geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot1_conf_preds, fill = 'black', alpha = 0.3) +   geom_linerange(aes(x = temp, ymin = ave_rate - sd, ymax = ave_rate + sd), d_ave) +   geom_point(aes(temp, ave_rate), d_ave, size = 2, shape = 21, fill = 'green4') +   theme_bw(base_size = 10) +   theme(legend.position = 'none',         strip.text = element_text(hjust = 0),         strip.background = element_blank()) +   labs(x ='Temperature (ºC)',        y = 'Metabolic rate',        title = 'Photosynthesis rates across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) +   ylim(c(-3, 3.5))  # plot bootstrapped predictions p2 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'black') +   geom_line(aes(temp, pred, group = iter), boot1_preds, col = 'black', alpha = 0.007) +   geom_linerange(aes(x = temp, ymin = ave_rate - sd, ymax = ave_rate + sd), d_ave) +   geom_point(aes(temp, ave_rate), d_ave, size = 2, shape = 21, fill = 'green4') +   theme_bw(base_size = 10) +   theme(legend.position = 'none',         strip.text = element_text(hjust = 0),         strip.background = element_blank()) +   labs(x ='Temperature (ºC)',        y = 'Metabolic rate',        title = 'Photosynthesis rates across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) +   ylim(c(-3, 3.5))  p1 + p2"},{"path":"https://padpadpadpad.github.io/rTPC/articles/weighted_bootstrapping.html","id":"method-2-residual-resampling-weighted-non-linear-regression-","dir":"Articles","previous_headings":"","what":"Method 2: Residual resampling weighted non-linear regression.","title":"Bootstrapping with weights using rTPC","text":"method, weights used correction Pearson residuals original model fit. modified residuals added onto fitted model predictions, mimicking methods used weighted linear regression (Algorithm 6.3 Davison Hinkley (2003)). implementation Boot() can viewed using getAnywhere(Boot.nls).","code":"# perform residual bootstrap boot2 <- Boot(fit_nlsLM, method = 'residual')  # predict over new data boot2_preds <- boot2$t %>%   as.data.frame() %>%   drop_na() %>%   mutate(iter = 1:n()) %>%   group_by_all() %>%   do(data.frame(temp = seq(min(d_ave$temp), max(d_ave$temp), length.out = 100))) %>%   ungroup() %>%   mutate(pred = lactin2_1995(temp, a, b, tmax, delta_t))  # calculate bootstrapped confidence intervals boot2_conf_preds <- group_by(boot2_preds, temp) %>%   summarise(conf_lower = quantile(pred, 0.025),             conf_upper = quantile(pred, 0.975),             .groups = 'drop')  # plot bootstrapped CIs p1 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'black') +   geom_ribbon(aes(temp, ymin = conf_lower, ymax = conf_upper), boot2_conf_preds, fill = 'black', alpha = 0.3) +   geom_linerange(aes(x = temp, ymin = ave_rate - sd, ymax = ave_rate + sd), d_ave) +   geom_point(aes(temp, ave_rate), d_ave, size = 2, shape = 21, fill = 'green4') +   theme_bw(base_size = 10) +   theme(legend.position = 'none',         strip.text = element_text(hjust = 0),         strip.background = element_blank()) +   labs(x ='Temperature (ºC)',        y = 'Metabolic rate',        title = 'Photosynthesis rates across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) +   ylim(c(-3, 3.5))  # plot bootstrapped predictions p2 <- ggplot() +   geom_line(aes(temp, .fitted), d_preds, col = 'black') +   geom_line(aes(temp, pred, group = iter), boot2_preds, col = 'black', alpha = 0.007) +   geom_linerange(aes(x = temp, ymin = ave_rate - sd, ymax = ave_rate + sd), d_ave) +   geom_point(aes(temp, ave_rate), d_ave, size = 2, shape = 21, fill = 'green4') +   theme_bw(base_size = 10) +   theme(legend.position = 'none',         strip.text = element_text(hjust = 0),         strip.background = element_blank()) +   labs(x ='Temperature (ºC)',        y = 'Metabolic rate',        title = 'Photosynthesis rates across temperatures') +   geom_hline(aes(yintercept = 0), linetype = 2) +   ylim(c(-3, 3.5))  p1 + p2"},{"path":"https://padpadpadpad.github.io/rTPC/articles/weighted_bootstrapping.html","id":"calculating-confidence-intervals-of-estimated-and-calculated-parameters","dir":"Articles","previous_headings":"","what":"Calculating confidence intervals of estimated and calculated parameters","title":"Bootstrapping with weights using rTPC","text":"standard non-linear regression, bootstrapping can estimate confidence intervals parameters explicitly modelled weighted regression. can compare approach profiled confidence intervals (using confint-MASS) asymptotic confidence intervals (using nlstools::confint2()). profiling approach fails, residual method returns values narrower created asymptotic intervals. case bootstrap work well instance. can seen, methods pros cons leave user decide whether approaches sensible individual use-case. bootstrapping approaches also used estimate uncertainty derived parameters, vignette(bootstrapping_models).","code":"# get parameters of fitted model param <- broom::tidy(fit_nlsLM) %>%   select(param = term, estimate)  # calculate confidence intervals of models ci1 <- nlstools::confint2(fit_nlsLM, method = 'asymptotic') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'asymptotic') ci2 <- nlstools::confint2(fit_nlsLM, method = 'profile') #> Waiting for profiling to be done... #> Error in prof$getProfile(): number of iterations exceeded maximum of 50 # profiling method fails ci2 <- mutate(ci1, method = 'profile',                     conf_lower = NA,                     conf_upper = NA)  # CIs from case resampling ci3 <- confint(boot1, method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'case bootstrap')  # CIs from residual resampling ci4 <- confint(boot2, method = 'bca') %>%   as.data.frame() %>%   rename(conf_lower = 1, conf_upper = 2) %>%   rownames_to_column(., var = 'param') %>%   mutate(method = 'residual bootstrap')  ci <- bind_rows(ci1, ci2, ci3, ci4) %>%   full_join(., param) #> Joining with `by = join_by(param)`  ggplot(ci, aes(forcats::fct_relevel(method, c('profile', 'asymptotic')), estimate, col = method)) +   geom_point(size = 4) +   geom_linerange(aes(ymin = conf_lower, ymax = conf_upper)) +   theme_bw() +   facet_wrap(~param, scales = 'free') +   scale_x_discrete('', labels = function(x) stringr::str_wrap(x, width = 10)) +   labs(title = 'Calculation of confidence intervals for model parameters',        subtitle = 'For the chlorella TPC; profile method failes')"},{"path":"https://padpadpadpad.github.io/rTPC/articles/weighted_bootstrapping.html","id":"further-reading","dir":"Articles","previous_headings":"Calculating confidence intervals of estimated and calculated parameters","what":"Further reading","title":"Bootstrapping with weights using rTPC","text":"https://artowen.su.domains/courses/305a/FoxOnBootingRegInR.pdf https://www.cambridge.org/core/books/bootstrap-methods---application/ED2FD043579F27952363566DC09CBD6A Schenker, N., & Gentleman, J. F. (2001). judging significance differences examining overlap confidence intervals. American Statistician, 55(3), 182-186. Puth, M. T., Neuhäuser, M., & Ruxton, G. D. (2015). variety methods calculating confidence intervals bootstrapping. Journal Animal Ecology, 84(4), 892-897.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Daniel Padfield. Author, maintainer. Hannah O'Sullivan. Author. Francis Windram. Author.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Padfield D, O'Sullivan H, Windram F (2025). rTPC: Fitting Analysing Thermal Performance Curves. R package version 1.0.7, https://padpadpadpad.github.io/rTPC/, https://github.com/padpadpadpad/rTPC.","code":"@Manual{,   title = {rTPC: Fitting and Analysing Thermal Performance Curves},   author = {Daniel Padfield and Hannah O'Sullivan and Francis Windram},   year = {2025},   note = {R package version 1.0.7, https://padpadpadpad.github.io/rTPC/},   url = {https://github.com/padpadpadpad/rTPC}, }"},{"path":"https://padpadpadpad.github.io/rTPC/index.html","id":"rtpc-","dir":"","previous_headings":"","what":"Fitting and Analysing Thermal Performance Curves","title":"Fitting and Analysing Thermal Performance Curves","text":"rTPC R package helps fit thermal performance curves (TPCs) R. rTPC contains 49 model formulations previously used fit TPCs helper functions help set sensible start parameters, upper lower parameter limits estimate parameters useful downstream analyses, cardinal temperatures, maximum rate optimum temperature. idea behind rTPC make fitting thermal performance curves easier, provide workflows examples fitting TPCs without saying model works best. model workflow “best” going question asked. Throughout vignettes, Things consider sections give key considerations consider analysis. developing rTPC, made conscious decision repeat code methods already optimised available R ecosystem. Consequently, workflows take advantage nls.multstart fitting non-linear least squares regression packages tidyverse data manipulation, fitting multiple models, visualisation. R package car used extensively bootstrapping approaches. rTPC pipelines outlined vignettes published Methods Ecology Evolution open access.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Fitting and Analysing Thermal Performance Curves","text":"R package helps , please cite R package: Padfield D, O’Sullivan H, Windram F (2024). rTPC: Fitting Analysing Thermal Performance Curves. R package version 1.0.7, https://padpadpadpad.github.io/rTPC/, https://github.com/padpadpadpad/rTPC allows developers package get credit work , since Francis Windram key driving development improvement rTPC publication MEE. can also cite publication Methods Ecology Evolution, please cite R packages rTPC nls.multstart well: Daniel Padfield, Hannah O’Sullivan, & Samraat Pawar (2021). rTPC nls.multstart: new pipeline fit thermal performance curves R. Methods Ecology Evolution. https://doi.org/10.1111/2041-210X.13585","code":""},{"path":"https://padpadpadpad.github.io/rTPC/index.html","id":"bugs-and-suggestions","dir":"","previous_headings":"","what":"Bugs and suggestions","title":"Fitting and Analysing Thermal Performance Curves","text":"Please report bugs suggestions Issues email d.padfield@exeter.ac.uk. requests inclusion new mathematical model formulation.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Fitting and Analysing Thermal Performance Curves","text":"devlopment version rTPC - likely includes date fixes new models - can installed GitHub using remotes::install_github(). vignettes available online, like build locally, add build_vignettes = TRUE install_github() command. However, recommend due number extra R packages utilised vignettes. rTPC can also easily downloaded CRAN.","code":"# install package from GitHub remotes::install_github(\"padpadpadpad/rTPC\") # install package from CRAN install.packages('rTPC')"},{"path":"https://padpadpadpad.github.io/rTPC/index.html","id":"general-pipeline","dir":"","previous_headings":"","what":"General pipeline","title":"Fitting and Analysing Thermal Performance Curves","text":"rTPC makes easy fit multiple models multiple thermal performance curves.  Figure 1. General pipeline fitting thermal performance curves using rTPC. (1) Collect, check, manipulate data long format. (2) Choose models rTPC going used. , random assortment four models chosen. (3) Fit models data using nls.multstart helper functions rTPC. (4) Models can visualised (5) common traits TPCs can estimated using rTPC::calc_params(). (6) simple pipeline can easily scaled used multiple curves.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/index.html","id":"extensions-to-the-pipeline","dir":"","previous_headings":"","what":"Extensions to the pipeline","title":"Fitting and Analysing Thermal Performance Curves","text":"rTPC can also easily used number common tasks needed fitting TPCs, model selection, model averaging, incorporating model weights bootstrapping model fits.  Figure 2. Potential applications fitting thermal performance curves using rTPC. (1) AIC, BIC metrics model fit can calculated help allow model selection model averaging. (2) TPCs fit averages multiple replicates, weighted NLLS can used reduce parameter bias. (3) model fitted, non-parametric bootstrapping approaches can help estimate model uncertainty calculate confidence intervals parameters.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Fitting and Analysing Thermal Performance Curves","text":"introduction rTPC, see vignette(\"rTPC\") follow general pipeline, see vignette(\"fit_many_models\") vignette(\"fit_many_curves\"). examples extensions pipeline, see vignette(\"model_averaging_selection\"), vignette(\"model_weighting\"), vignette(\"bootstrapping_models\"), vignette(\"weighted_bootstrapping\"), vignette(\"bootstrapping_many_curves\").","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":null,"dir":"Reference","previous_headings":"","what":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"Analytis-Kontodimas model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"","code":"analytiskontodimas_2004(temp, a, tmin, tmax)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"temp temperature degrees centigrade scale parameter defining height curve tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"Equation: $$rate = \\cdot \\left(T - T_{\\text{min}}\\right)^2 \\cdot \\left(T_{\\text{max}} - T\\right)$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"Kontodimas, D. C., Eliopoulos, P. ., Stathas, G. J. & Economou, L. P. Comparative temperature-dependent development Nephus includens (Kirsch) Nephus bisignatus (Boheman) (Coleoptera: Coccinellidae) preying Planococcus citri (Risso) (Homoptera: Pseudococcidae): evaluation linear various nonlinear models using specific criteria. Environ. Entomol. 33, 1–11 (2004).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/analytiskontodimas_2004.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Analytis-Kontodimas model for fitting thermal performance curves — analytiskontodimas_2004","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'analytiskontodimas_2004') # fit model mod <- nls.multstart::nls_multstart(rate~analytiskontodimas_2004(temp = temp, a, tmin, tmax), data = d, iter = 200, start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'analytiskontodimas_2004'), upper = get_upper_lims(d$temp, d$rate, model_name = 'analytiskontodimas_2004'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ analytiskontodimas_2004(temp = temp, a, tmin, tmax) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> a    2.249e-04  7.640e-05   2.944 0.016381 *   #> tmin 1.438e+01  2.763e+00   5.203 0.000562 *** #> tmax 4.900e+01  9.767e-01  50.170 2.49e-12 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3081 on 9 degrees of freedom #>  #> Number of iterations to convergence: 45  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"Ashrafi model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"","code":"ashrafi1_2018(temp, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"temp temperature degrees centigrade dimensionless parameter b dimensionless parameter c dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"Equation: $$rate=+ b \\cdot temp^{2} + log(temp) + c \\cdot temp^{3}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"Ashrafi, R. et al. Broad thermal tolerance negatively correlated virulence opportunistic bacterial pathogen. Evolutionary Applications 11, 1700–1714 (2018).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi1_2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ashrafi I model for fitting thermal performance curves — ashrafi1_2018","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'ashrafi1_2018') # fit model mod <- nls.multstart::nls_multstart(rate~ashrafi1_2018(temp = temp, a, b, c), data = d, iter = c(4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'ashrafi1_2018'), upper = get_upper_lims(d$temp, d$rate, model_name = 'ashrafi2_2018'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ ashrafi1_2018(temp = temp, a, b, c) #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|)     #> a -4.691e+00  8.661e-01  -5.417 0.000424 *** #> b  1.172e-01  4.223e-02   2.776 0.021552 *   #> c -4.008e-05  1.214e-05  -3.301 0.009221 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3909 on 9 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"Ashrafi II model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"","code":"ashrafi2_2018(temp, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"temp temperature degrees centigrade dimensionless parameter b dimensionless parameter c dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"Equation: $$rate=+ b \\cdot temp^{\\frac{3}{2}} + c \\cdot temp^{2}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"Ashrafi, R. et al. Broad thermal tolerance negatively correlated virulence opportunistic bacterial pathogen. Evolutionary Applications 11, 1700–1714 (2018).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi2_2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ashrafi II model for fitting thermal performance curves — ashrafi2_2018","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'ashrafi2_2018') # fit model mod <- nls.multstart::nls_multstart(rate~ashrafi2_2018(temp = temp, a, b, c), data = d, iter = c(4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'ashrafi2_2018'), upper = get_upper_lims(d$temp, d$rate, model_name = 'ashrafi2_2018'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ ashrafi2_2018(temp = temp, a, b, c) #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)    #> a -2.465539   0.824327  -2.991  0.01518 *  #> b  0.072362   0.018888   3.831  0.00402 ** #> c -0.009205   0.002448  -3.761  0.00448 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3917 on 9 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"Ashrafi III model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"","code":"ashrafi3_2018(temp, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"temp temperature degrees centigrade dimensionless parameter b dimensionless parameter c dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"Equation: $$rate = \\frac{1}{(+ b \\cdot exp^{temp} + d \\cdot exp^{-temp})}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"Ashrafi, R. et al. Broad thermal tolerance negatively correlated virulence opportunistic bacterial pathogen. Evolutionary Applications 11, 1700–1714 (2018).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi3_2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ashrafi III model for fitting thermal performance curves — ashrafi3_2018","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'ashrafi3_2018') # fit model mod <- nls.multstart::nls_multstart(rate~ashrafi3_2018(temp = temp, a, b, c), data = d, iter = c(4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'ashrafi3_2018'), upper = get_upper_lims(d$temp, d$rate, model_name = 'ashrafi3_2018'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ ashrafi3_2018(temp = temp, a, b, c) #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)     #> a 7.518e-01  8.146e-02   9.229 6.95e-06 *** #> b 3.090e-20  3.406e-20   0.907    0.388     #> c 1.949e+11  2.129e+11   0.915    0.384     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3022 on 9 degrees of freedom #>  #> Number of iterations till stop: 91  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 400. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"Ashrafi IV model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"","code":"ashrafi4_2018(temp, a, b, c, d)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"temp temperature degrees centigrade dimensionless parameter b dimensionless parameter c dimensionless parameter d dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"Equation: $$rate = + b \\cdot (temp + 273.15) + c \\cdot log((temp + 273.15)^2) + \\cdot \\sqrt{temp + 273.15}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"Ashrafi, R. et al. Broad thermal tolerance negatively correlated virulence opportunistic bacterial pathogen. Evolutionary Applications 11, 1700–1714 (2018).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi4_2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ashrafi IV model for fitting thermal performance curves — ashrafi4_2018","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'ashrafi4_2018') # fit model mod <- nls.multstart::nls_multstart(rate~ashrafi4_2018(temp = temp, a, b, c, d), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'ashrafi4_2018'), upper = get_upper_lims(d$temp, d$rate, model_name = 'ashrafi4_2018'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ ashrafi4_2018(temp = temp, a, b, c, d) #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)   #> a  42548.7    16558.0   2.570   0.0331 * #> b   -452.4      167.8  -2.697   0.0272 * #> c -18350.0     6882.7  -2.666   0.0285 * #> d  39846.1    14877.6   2.678   0.0280 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3185 on 8 degrees of freedom #>  #> Number of iterations to convergence: 10  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"Ashrafi V model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"","code":"ashrafi5_2018(temp, a, b, c, d)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"temp temperature degrees centigrade dimensionless parameter b dimensionless parameter c dimensionless parameter d dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"Equation: $$rate = + b \\cdot log(temp + 273.15)^2 + c \\cdot log(temp + 273.15) + \\frac{d \\cdot log(temp + 273.15)}{temp + 273.15}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"Ashrafi, R. et al. Broad thermal tolerance negatively correlated virulence opportunistic bacterial pathogen. Evolutionary Applications 11, 1700–1714 (2018).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ashrafi5_2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ashrafi V model for fitting thermal performance curves — ashrafi5_2018","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'ashrafi5_2018') # fit model mod <- nls.multstart::nls_multstart(rate~ashrafi5_2018(temp = temp, a, b, c, d), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'ashrafi5_2018'), upper = get_upper_lims(d$temp, d$rate, model_name = 'ashrafi5_2018'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ ashrafi5_2018(temp = temp, a, b, c, d) #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)    #> a -39560.72   11353.74  -3.484  0.00827 ** #> b  -1184.91     341.14  -3.473  0.00840 ** #> c  13645.10    3935.71   3.467  0.00848 ** #> d     40.81      16.74   2.437  0.04073 *  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3351 on 8 degrees of freedom #>  #> Number of iterations to convergence: 9  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":null,"dir":"Reference","previous_headings":"","what":"Atkin model for fitting thermal performance curves — atkin_2005","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"Atkin model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"","code":"atkin_2005(temp, r0, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"temp temperature degrees centigrade r0 scaling parameter, minimum trait value arbitrary scaling parameter b arbitrary scaling parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"Equation: $$rate = B_0 \\cdot (- b \\cdot T)^{\\frac{T}{10}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"Atkin, OK, Bruhn D, Tjoelker MG. Response Plant Respiration Changes Temperature: Mechanisms Consequences Variations Q10 Values Acclimation. Plant Respiration. 2005.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/atkin_2005.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Atkin model for fitting thermal performance curves — atkin_2005","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'atkin_2005') # fit model mod <- nls.multstart::nls_multstart(rate~atkin_2005(temp = temp, r0, a, b), data = d, iter = 200, start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'atkin_2005'), upper = get_upper_lims(d$temp, d$rate, model_name = 'atkin_2005'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ atkin_2005(temp = temp, r0, a, b) #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|)   #> r0 7.332e-04  9.598e-04   0.764   0.4644   #> a  2.352e+01  1.086e+01   2.166   0.0585 . #> b  4.212e-01  2.152e-01   1.957   0.0820 . #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2769 on 9 degrees of freedom #>  #> Number of iterations to convergence: 20  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/bacteria_tpc.html","id":null,"dir":"Reference","previous_headings":"","what":"Example thermal performance curves of bacterial growth — bacteria_tpc","title":"Example thermal performance curves of bacterial growth — bacteria_tpc","text":"dataset containing example data growth rates bacteria Pseudomonas fluorescens presence absence phage, phi2. Growth rates measured across range assay temperatures incorporate entire thermal performance bacteria dataset cleaned version data points omitted. multiple independent measurements per temperature treatment.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/bacteria_tpc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example thermal performance curves of bacterial growth — bacteria_tpc","text":"","code":"data(\"bacteria_tpc\")"},{"path":"https://padpadpadpad.github.io/rTPC/reference/bacteria_tpc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example thermal performance curves of bacterial growth — bacteria_tpc","text":"data frame 649 rows 7 variables: phage whether bacteria grown without phage temp assay temperature growth rate measured (degrees centigrade) rate estimated growth rate per hour","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/bacteria_tpc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example thermal performance curves of bacterial growth — bacteria_tpc","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/bacteria_tpc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example thermal performance curves of bacterial growth — bacteria_tpc","text":"Padfield, D., Castledine, M., & Buckling, . (2020). Temperature-dependent changes host–parasite interactions alter thermal performance bacterial host. ISME Journal, 14(2), 389-398.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/bacteria_tpc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example thermal performance curves of bacterial growth — bacteria_tpc","text":"","code":"data(\"bacteria_tpc\") library(ggplot2) ggplot(bacteria_tpc) +  geom_point(aes(temp, rate, col = phage))"},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Beta model for fitting thermal performance curves — beta_2012","title":"Beta model for fitting thermal performance curves — beta_2012","text":"Beta model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Beta model for fitting thermal performance curves — beta_2012","text":"","code":"beta_2012(temp, a, b, c, d, e)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Beta model for fitting thermal performance curves — beta_2012","text":"temp temperature degrees centigrade dimensionless parameter b dimensionless parameter c dimensionless parameter d dimensionless parameter e dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Beta model for fitting thermal performance curves — beta_2012","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Beta model for fitting thermal performance curves — beta_2012","text":"Equation: $$rate=\\frac{\\left(\\frac{temp-b+\\frac{c(d-1)}{d+e-2}}{c}\\right)^{d-1}  \\cdot \\left(1-\\frac{temp-b+\\frac{c(d-1)}{d+e-2}}{c}\\right)^{e-1}}{{\\left(\\frac{d-1}{d+e-2}\\right)}^{d-1}\\cdot \\left(\\frac{e-1}{d+e-2}\\right)^{e-1}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Beta model for fitting thermal performance curves — beta_2012","text":"Generally found model difficult fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Beta model for fitting thermal performance curves — beta_2012","text":"Niehaus, Amanda C., et al. Predicting physiological performance ectotherms fluctuating thermal environments. Journal Experimental Biology 215.4: 694-701 (2012)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Beta model for fitting thermal performance curves — beta_2012","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/beta_2012.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Beta model for fitting thermal performance curves — beta_2012","text":"","code":"# \\donttest{ # load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'beta_2012') # fit model mod <- nls.multstart::nls_multstart(rate~beta_2012(temp = temp, a, b, c, d, e), data = d, iter = c(7,7,7,7,7), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'beta_2012'), upper = get_upper_lims(d$temp, d$rate, model_name = 'beta_2012'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ beta_2012(temp = temp, a, b, c, d, e) #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)     #> a   1.3705     0.2075   6.603 0.000303 *** #> b  38.0181     2.1177  17.952 4.11e-07 *** #> c  39.8301    26.8167   1.485 0.181054     #> d   3.5729     4.4133   0.810 0.444817     #> e   1.9795     0.7895   2.507 0.040557 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3508 on 7 degrees of freedom #>  #> Number of iterations till stop: 95  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 600. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()  # }"},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"Simplified Beta-type model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"","code":"betatypesimplified_2008(temp, rho, alpha, beta)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"temp temperature degrees centigrade rho dimensionless parameter alpha dimensionless parameter beta dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"Equation: $$rate = \\rho \\cdot \\left(- \\frac{T}{10}\\right) \\cdot \\left(\\frac{T}{10}\\right)^b$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"Damos, P. & Savopoulou-Soultani, M. Temperature-dependent bionomics modeling Anarsia lineatella (Lepidoptera: Gelechiidae) laboratory. J. Econ. Entomol. 101, 1557–1567 (2008).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/betatypesimplified_2008.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified Beta-type model for fitting thermal performance curves — betatypesimplified_2008","text":"","code":"# \\donttest{ # load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'betatypesimplified_2008') # fit model mod <- nls.multstart::nls_multstart(rate~betatypesimplified_2008(temp = temp, rho, alpha, beta), data = d, iter = c(7,7,7), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'betatypesimplified_2008'), upper = get_upper_lims(d$temp, d$rate, model_name = 'betatypesimplified_2008'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ betatypesimplified_2008(temp = temp, rho, alpha, beta) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> rho   0.007730   0.005718   1.352 0.209431     #> alpha 4.868080   0.077947  62.454 3.49e-13 *** #> beta  3.834485   0.595151   6.443 0.000119 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3108 on 9 degrees of freedom #>  #> Number of iterations to convergence: 57  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()  # }"},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Boatman model for fitting thermal performance curves — boatman_2017","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"Boatman model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"","code":"boatman_2017(temp, rmax, tmin, tmax, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"temp temperature degrees centigrade rmax rate optimum temperature tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative shape parameter adjust skewness curve b shape  parameter adjust kurtosis curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"Equation: $$rate= r_{max} \\cdot \\left(sin\\bigg(\\pi\\left(\\frac{temp-t_{min}}{t_{max} - t_{min}}\\right)^{}\\bigg)\\right)^{b}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"Boatman, T. G., Lawson, T., & Geider, R. J. key marine diazotroph changing ocean: interacting effects temperature, CO2 light growth Trichodesmium erythraeum IMS101. PLoS ONE, 12, e0168796 (2017)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/boatman_2017.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Boatman model for fitting thermal performance curves — boatman_2017","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'boatman_2017') # fit model mod <- nls.multstart::nls_multstart(rate~boatman_2017(temp = temp, rmax, tmin, tmax, a, b), data = d, iter = c(4,4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'boatman_2017'), upper = get_upper_lims(d$temp, d$rate, model_name = 'boatman_2017'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ boatman_2017(temp = temp, rmax, tmin, tmax, a, b) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> rmax   1.5830     0.1968   8.043 8.81e-05 *** #> tmin -50.0000   835.2422  -0.060  0.95394     #> tmax  49.0001    11.8441   4.137  0.00436 **  #> a      6.1124    48.7078   0.125  0.90366     #> b      1.9269     7.0552   0.273  0.79265     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2739 on 7 degrees of freedom #>  #> Number of iterations to convergence: 75  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":null,"dir":"Reference","previous_headings":"","what":"Brière I model for fitting thermal performance curves — briere1_1999","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"Brière model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"","code":"briere1_1999(temp, tmin, tmax, a)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative scale parameter adjust maximum rate curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"Equation: $$rate=\\cdot temp \\cdot (temp - t_{min}) \\cdot (t_{max} - temp)^{\\frac{1}{2}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"Brière, J.F., Pracros, P., Le Roux, .Y., Pierre, J.S.,  novel rate model temperature-dependent development arthropods. Environmental Entomololgy, 28, 22–29 (1999)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1_1999.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brière I model for fitting thermal performance curves — briere1_1999","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'briere1_1999') # fit model mod <- nls.multstart::nls_multstart(rate~briere1_1999(temp = temp, tmin, tmax, a), data = d, iter = c(3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'briere1_1999'), upper = get_upper_lims(d$temp, d$rate, model_name = 'briere1_1999'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ briere1_1999(temp = temp, tmin, tmax, a) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> tmin 1.034e+01  7.758e+00   1.333   0.2153     #> tmax 4.903e+01  2.144e-01 228.741   <2e-16 *** #> a    3.532e-04  1.236e-04   2.857   0.0189 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3921 on 9 degrees of freedom #>  #> Number of iterations to convergence: 21  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"Simplified Brière model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"","code":"briere1simplified_1999(temp, tmin, tmax, a)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative scale parameter adjust maximum rate curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"Equation: $$rate=\\cdot (temp - t_{min}) \\cdot (t_{max} - temp)^{\\frac{1}{2}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"Brière, J.F., Pracros, P., Le Roux, .Y., Pierre, J.S.,  novel rate model temperature-dependent development arthropods. Environmental Entomololgy, 28, 22–29 (1999)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere1simplified_1999.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified Brière I model for fitting thermal performance curves — briere1simplified_1999","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'briere1simplified_1999') # fit model mod <- nls.multstart::nls_multstart(rate~briere1simplified_1999(temp = temp, tmin, tmax, a), data = d, iter = c(3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'briere1simplified_1999'), upper = get_upper_lims(d$temp, d$rate, model_name = 'briere1simplified_1999'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ briere1simplified_1999(temp = temp, tmin, tmax, a) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> tmin 16.373534   2.443916   6.700 8.86e-05 *** #> tmax 49.050436   0.304948 160.849  < 2e-16 *** #> a     0.017105   0.003356   5.097 0.000648 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3776 on 9 degrees of freedom #>  #> Number of iterations to convergence: 23  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":null,"dir":"Reference","previous_headings":"","what":"Brière II model for fitting thermal performance curves — briere2_1999","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"Brière II model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"","code":"briere2_1999(temp, tmin, tmax, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative scale parameter adjust maximum rate curve b shape parameter adjust asymmetry curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"Equation: $$rate=\\cdot temp \\cdot(temp - t_{min}) \\cdot (t_{max} - temp)^{\\frac{1}{b}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"Brière, J.F., Pracros, P., Le Roux, .Y., Pierre, J.S.,  novel rate model temperature-dependent development arthropods. Environmental Entomololgy, 28, 22–29 (1999)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2_1999.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Brière II model for fitting thermal performance curves — briere2_1999","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'briere2_1999') # fit model mod <- nls.multstart::nls_multstart(rate~briere2_1999(temp = temp, tmin, tmax, a, b), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'briere2_1999'), upper = get_upper_lims(d$temp, d$rate, model_name = 'briere2_1999'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ briere2_1999(temp = temp, tmin, tmax, a, b) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> tmin 1.675e+01  3.098e+00   5.405 0.000642 *** #> tmax 4.908e+01  1.105e+00  44.436 7.26e-11 *** #> a    1.843e-04  1.353e-04   1.362 0.210280     #> b    1.099e+00  3.597e-01   3.055 0.015701 *   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3481 on 8 degrees of freedom #>  #> Number of iterations to convergence: 28  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"Simplified Brière II model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"","code":"briere2simplified_1999(temp, tmin, tmax, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative scale parameter adjust maximum rate curve b shape parameter adjust asymmetry curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"Equation: $$rate=\\cdot (temp - t_{min}) \\cdot (t_{max} - temp)^{\\frac{1}{b}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"Brière, J.F., Pracros, P., Le Roux, .Y., Pierre, J.S.,  novel rate model temperature-dependent development arthropods. Environmental Entomololgy, 28, 22–29 (1999)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briere2simplified_1999.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified Brière II model for fitting thermal performance curves — briere2simplified_1999","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'briere2simplified_1999') # fit model mod <- nls.multstart::nls_multstart(rate~briere2simplified_1999(temp = temp, tmin, tmax, a, b), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'briere2simplified_1999'), upper = get_upper_lims(d$temp, d$rate, model_name = 'briere2simplified_1999'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ briere2simplified_1999(temp = temp, tmin, tmax, a, b) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> tmin 16.942850   2.344665   7.226 9.01e-05 *** #> tmax 49.107438   0.730641  67.211 2.67e-12 *** #> a     0.013094   0.008992   1.456   0.1834     #> b     1.605833   0.719933   2.231   0.0563 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3926 on 8 degrees of freedom #>  #> Number of iterations to convergence: 35  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":null,"dir":"Reference","previous_headings":"","what":"Extended Brière model for fitting thermal performance curves — briereextended_2021","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"Extended Brière model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"","code":"briereextended_2021(temp, tmin, tmax, a, b, d)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative scale parameter adjust maximum rate curve b shape parameter adjust asymmetry curve d shape parameter adjust asymmetry curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"Equation: $$rate=\\cdot temp \\cdot (temp - t_{min})^b \\cdot (t_{max} - temp)^d$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"Cruz-Loya, M. et al. Antibiotics shift temperature response curve Escherichia coli growth. mSystems 6, e00228–21 (2021).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextended_2021.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extended Brière model for fitting thermal performance curves — briereextended_2021","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'briereextended_2021') # fit model mod <- nls.multstart::nls_multstart(rate~briereextended_2021(temp = temp, tmin, tmax, a, b, d), data = d, iter = c(4,4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'briereextended_2021'), upper = get_upper_lims(d$temp, d$rate, model_name = 'briereextended_2021'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ briereextended_2021(temp = temp, tmin, tmax, a, b, d) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)    #> tmin -4.728e+01  7.734e+02  -0.061  0.95296    #> tmax  4.900e+01  1.057e+01   4.634  0.00239 ** #> a     5.624e-37  5.821e-34   0.001  0.99926    #> b     1.676e+01  1.942e+02   0.086  0.93361    #> d     2.411e+00  7.873e+00   0.306  0.76836    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2841 on 7 degrees of freedom #>  #> Number of iterations to convergence: 57  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":null,"dir":"Reference","previous_headings":"","what":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"Simplified Extended Brière model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"","code":"briereextendedsimplified_2021(temp, tmin, tmax, a, b, d)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative scale parameter adjust maximum rate curve b shape parameter adjust asymmetry curve d shape parameter adjust asymmetry curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"Equation: $$rate=\\cdot (temp - t_{min})^b \\cdot (t_{max} - temp)^d$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"Cruz-Loya, M. et al. Antibiotics shift temperature response curve Escherichia coli growth. mSystems 6, e00228–21 (2021).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/briereextendedsimplified_2021.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simplified Extended Brière model for fitting thermal performance curves — briereextendedsimplified_2021","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'briereextendedsimplified_2021') # fit model mod <- nls.multstart::nls_multstart(   rate~briereextendedsimplified_2021(temp = temp, tmin, tmax, a, b, d),   data = d,   iter = c(4,4,4,4,4),   start_lower = start_vals - 10,   start_upper = start_vals + 10,   lower = get_lower_lims(d$temp, d$rate, model_name = 'briereextendedsimplified_2021'),   upper = get_upper_lims(d$temp, d$rate, model_name = 'briereextendedsimplified_2021'),   supp_errors = 'Y',   convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ briereextendedsimplified_2021(temp = temp, tmin, tmax,  #>     a, b, d) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)    #> tmin -3.901e+01  5.077e+02  -0.077  0.94089    #> tmax  4.900e+01  1.011e+01   4.845  0.00187 ** #> a     1.285e-35  1.004e-32   0.001  0.99901    #> b     1.726e+01  1.493e+02   0.116  0.91124    #> d     2.436e+00  7.452e+00   0.327  0.75329    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2829 on 7 degrees of freedom #>  #> Number of iterations to convergence: 56  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/calc_params.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate extra parameters of a thermal performance curve — calc_params","title":"Calculate extra parameters of a thermal performance curve — calc_params","text":"Calculate extra parameters thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/calc_params.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate extra parameters of a thermal performance curve — calc_params","text":"","code":"calc_params(model, ...)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/calc_params.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate extra parameters of a thermal performance curve — calc_params","text":"model nls model object contains model thermal performance curve ... additional arguments pass functions used estimate traits. example can change level argument get_breadth().","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/calc_params.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate extra parameters of a thermal performance curve — calc_params","text":"dataframe containing estimates key TPC traits given model object. parameters calculated thermal performance curve, return NA.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/calc_params.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate extra parameters of a thermal performance curve — calc_params","text":"Currently estimates: maximum rate (rmax) using get_rmax() optimum temperature (topt) using get_topt() critical thermal maximum (ctmax) using get_ctmax() critical thermal minimum (ctmin) using get_ctmin() activation energy (e) using get_e() deactivation energy (eh) using get_eh() q10 value using get_q10() thermal safety margin using get_thermalsafetymargin() thermal tolerance using get_thermaltolerance() thermal performance breadth using get_breadth() skewness using get_skewness()","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/chlorella_tpc.html","id":null,"dir":"Reference","previous_headings":"","what":"Example metabolic thermal performance curves — chlorella_tpc","title":"Example metabolic thermal performance curves — chlorella_tpc","text":"dataset containing example data rates photosynthesis respiration phytoplankton Chlorella vulgaris. Instantaneous rates metabolism made across range assay temperatures incorporate entire thermal performance populations. dataset cleaned version datapoints omitted.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/chlorella_tpc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example metabolic thermal performance curves — chlorella_tpc","text":"","code":"data(\"chlorella_tpc\")"},{"path":"https://padpadpadpad.github.io/rTPC/reference/chlorella_tpc.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example metabolic thermal performance curves — chlorella_tpc","text":"data frame 649 rows 7 variables: curve_id unique value separate curve growth_temp growth temperature culture maintained measurements taken (degrees centigrade) process whether cultures kept long time growth temperature (adaptation/~100 generations) short time (measure acclimation/~10 generations) flux whether curve depicts respiration gross photosynthesis temp assay temperature metabolic rate measured (degrees centigrade) rate metabolic rate measured (micro mol O2 micro gram C-1 hr-1)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/chlorella_tpc.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Example metabolic thermal performance curves — chlorella_tpc","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/chlorella_tpc.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Example metabolic thermal performance curves — chlorella_tpc","text":"Padfield, D., Yvon-durocher, G., Buckling, ., Jennings, S. & Yvon-durocher, G. (2015). Rapid evolution metabolic traits explains thermal adaptation phytoplankton, Ecology Letters, 19, 133-142.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/chlorella_tpc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example metabolic thermal performance curves — chlorella_tpc","text":"","code":"data(\"chlorella_tpc\") library(ggplot2) ggplot(chlorella_tpc) +  geom_point(aes(temp, rate, col = process)) +  facet_wrap(~ growth_temp + flux)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":null,"dir":"Reference","previous_headings":"","what":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"DeLong enzyme-assisted Arrhenius model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"","code":"delong_2017(temp, c, eb, ef, tm, ehc)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"temp temperature degrees centigrade c potential reaction rate eb baseline energy needed reaction occur (eV) ef temperature dependence folding enzymes used metabolic reaction, relative melting temperature (eV) tm melting temperature degrees centigrade ehc temperature dependence heat capacity folded unfolded state enzymes, relative melting temperature (eV)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"Equation: $$rate = c \\cdot exp\\frac{-(e_b-(e_f(1-\\frac{temp + 273.15}{t_m})+e_{hc} \\cdot ((temp + 273.15) - t_m - (temp + 273.15) \\cdot ln(\\frac{temp + 273.15}{t_m}))))}{k \\cdot (temp + 273.15)}$$ k Boltzmann's constant value 8.62e-05 tm actually tm - 273.15 Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"DeLong, John P., et al. combined effects reactant kinetics enzyme stability explain temperature dependence metabolic rates. Ecology evolution 7.11 (2017): 3940-3950.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/delong_2017.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"DeLong enzyme-assisted Arrhenius model for fitting thermal performance curves — delong_2017","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'delong_2017') # fit model mod <- nls.multstart::nls_multstart(rate~delong_2017(temp = temp, c, eb, ef, tm,ehc), data = d, iter = c(4,4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'delong_2017'), upper = get_upper_lims(d$temp, d$rate, model_name = 'delong_2017'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ delong_2017(temp = temp, c, eb, ef, tm, ehc) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)   #> c   1.598e+02  1.951e+09   0.000    1.000   #> eb  1.252e-01  3.263e+05   0.000    1.000   #> ef  2.715e-01  3.114e+05   0.000    1.000   #> tm  3.711e+01  9.028e+05   0.000    1.000   #> ehc 1.575e-01  6.464e-02   2.437    0.045 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3787 on 7 degrees of freedom #>  #> Number of iterations to convergence: 46  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"Modified deutsch model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"","code":"deutsch_2008(temp, rmax, topt, ctmax, a)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"temp temperature degrees centigrade rmax maximum rate optimum temperature topt optimum temperature (ºC) ctmax critical thermal maximum (ºC) related full curve width","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"Equation: $$\\textrm{} \\quad temp < t_{opt}: rate = r_{max} \\cdot exp^{-\\bigg(\\frac{temp-t_{opt}}{2a}\\bigg)^2}$$ $$\\textrm{} \\quad temp > t_{opt}: rate = r_{max} \\cdot \\left(1 - \\bigg(\\frac{temp - t_{opt}}{t_{opt} - ct_{max}}\\bigg)^2\\right)$$ Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"Deutsch, C. ., Tewksbury, J. J., Huey, R. B., Sheldon, K. S., Ghalambor, C. K., Haak, D. C., & Martin, P. R. Impacts climate warming terrestrial ectotherms across latitude. Proceedings National Academy Sciences, 105(18), 6668-6672. (2008)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/deutsch_2008.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified deutsch model for fitting thermal performance curves — deutsch_2008","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'deutsch_2008') # fit model mod <- nls.multstart::nls_multstart(rate~deutsch_2008(temp = temp, rmax, topt, ctmax, a), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'deutsch_2008'), upper = get_upper_lims(d$temp, d$rate, model_name = 'deutsch_2008'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ deutsch_2008(temp = temp, rmax, topt, ctmax, a) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> rmax    1.4363     0.1639   8.765 2.25e-05 *** #> topt   38.2306     2.7887  13.709 7.73e-07 *** #> ctmax  48.7175     0.9798  49.722 2.96e-11 *** #> a       6.7950     1.9474   3.489  0.00821 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3105 on 8 degrees of freedom #>  #> Number of iterations to convergence: 34  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":null,"dir":"Reference","previous_headings":"","what":"Eubank model for fitting thermal performance curves — eubank_1973","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"Eubank model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"","code":"eubank_1973(temp, topt, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"temp temperature degrees centigrade topt optimum temperature (ºC) scale parameter defining height curve b shape parameter curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"Equation: $$rate = \\frac{}{(T-T_{\\text{opt}})^2+b}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"Eubank, W. P., Atmar, J. W. & Ellington, J. J. significance thermodynamics fluctuating versus static thermal environments Heliothis zea egg development rates. Environ. Entomol. 2, 491–496 (1973).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/eubank_1973.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Eubank model for fitting thermal performance curves — eubank_1973","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'eubank_1973') # fit model mod <- nls.multstart::nls_multstart(rate~eubank_1973(temp = temp, topt, a, b), data = d, iter = 200, start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'eubank_1973'), upper = get_upper_lims(d$temp, d$rate, model_name = 'eubank_1973'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ eubank_1973(temp = temp, topt, a, b) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> topt   37.225      1.124  33.124 1.03e-10 *** #> a      86.015     33.164   2.594   0.0290 *   #> b      53.887     25.864   2.084   0.0669 .   #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3336 on 9 degrees of freedom #>  #> Number of iterations to convergence: 24  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":null,"dir":"Reference","previous_headings":"","what":"flexTPC model for fitting thermal performance curves — flextpc_2024","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"flexTPC model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"","code":"flextpc_2024(temp, tmin, tmax, rmax, alpha, beta)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative rmax maximum performance/value trait alpha shape parameter adjust asymmetry direction skew curve beta shape parameter adjust breadth curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"Equation: $$rate=r_{\\text{max}}\\left[\\left(\\frac{T - T_{\\text{min}}}{\\alpha}\\right)^\\alpha\\left(\\frac{T_{\\text{max}}-T}{1-\\alpha}\\right)^{1-\\alpha}\\left(\\frac{1}{T_{\\text{max}}-T_{\\text{min}}}\\right)\\right]^{\\frac{\\alpha(1-\\alpha)}{\\beta^2}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"Generally model requires larger iter values nls_multstart fit reliably.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"Cruz-Loya M, Mordecai EA, Savage VM. flexible model thermal performance curves. bioRxiv [Preprint]. 2024","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flextpc_2024.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"flexTPC model for fitting thermal performance curves — flextpc_2024","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'flextpc_2024') # fit model mod <- nls.multstart::nls_multstart(rate~flextpc_2024(temp = temp, tmin, tmax, rmax, alpha, beta), data = d, iter = c(5,5,5,5,5), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'flextpc_2024'), upper = get_upper_lims(d$temp, d$rate, model_name = 'flextpc_2024'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ flextpc_2024(temp = temp, tmin, tmax, rmax, alpha, beta) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)     #> tmin  -34.00000  426.36779  -0.080  0.93867     #> tmax   49.00000   10.20440   4.802  0.00196 **  #> rmax    1.56721    0.19818   7.908 9.81e-05 *** #> alpha   0.86971    0.58012   1.499  0.17751     #> beta    0.08336    0.46069   0.181  0.86154     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2794 on 7 degrees of freedom #>  #> Number of iterations to convergence: 36  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":null,"dir":"Reference","previous_headings":"","what":"Flinn model for fitting thermal performance curves — flinn_1991","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"Flinn model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"","code":"flinn_1991(temp, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"temp temperature degrees centigrade parameter controls height curve b parameter controls slope initial increase curve c parameter controls position steepness decline curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"Equation: $$rate= \\frac{1}{1++b \\cdot temp+c \\cdot temp^2}$$ Start values get_start_vals derived previous methods literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"Flinn PW Temperature-dependent functional response parasitoid Cephalonomia waterstoni (Gahan) (Hymenoptera, Bethylidae) attacking rusty grain beetle larvae (Coleoptera, Cucujidae). Environmental Entomology, 20, 872–876, (1991)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/flinn_1991.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Flinn model for fitting thermal performance curves — flinn_1991","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'flinn_1991') # fit model mod <- nls.multstart::nls_multstart(rate~flinn_1991(temp = temp, a, b, c), data = d, iter = c(4,4,4), start_lower = start_vals - 1, start_upper = start_vals + 1, lower = get_lower_lims(d$temp, d$rate, model_name = 'flinn_1991'), upper = get_upper_lims(d$temp, d$rate, model_name = 'flinn_1991'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ flinn_1991(temp = temp, a, b, c) #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)   #> a 15.736392   6.184659   2.544   0.0315 * #> b -0.865546   0.333214  -2.598   0.0289 * #> c  0.011626   0.004482   2.594   0.0290 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3336 on 9 degrees of freedom #>  #> Number of iterations to convergence: 45  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":null,"dir":"Reference","previous_headings":"","what":"Gaussian model for fitting thermal performance curves — gaussian_1987","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"Gaussian model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"","code":"gaussian_1987(temp, rmax, topt, a)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"temp temperature degrees centigrade rmax maximum rate optimum temperature topt optimum temperature (ºC) related full curve width","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"Equation: $$rate = r_{max} \\cdot exp^{\\bigg(-0.5 \\left(\\frac{|temp-t_{opt}|}{}\\right)^2\\bigg)}$$ Start values get_start_vals derived data Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"Lynch, M., Gabriel, W., Environmental tolerance. American Naturalist. 129, 283–303. (1987)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussian_1987.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Gaussian model for fitting thermal performance curves — gaussian_1987","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'gaussian_1987') # fit model mod <- nls.multstart::nls_multstart(rate~gaussian_1987(temp = temp,rmax, topt,a), data = d, iter = c(4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'gaussian_1987'), upper = get_upper_lims(d$temp, d$rate, model_name = 'gaussian_1987'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ gaussian_1987(temp = temp, rmax, topt, a) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> rmax   1.4972     0.1963   7.627 3.23e-05 *** #> topt  36.3381     1.0928  33.253 9.91e-11 *** #> a      7.2062     1.1396   6.323 0.000137 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3268 on 9 degrees of freedom #>  #> Number of iterations to convergence: 20  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":null,"dir":"Reference","previous_headings":"","what":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"Modified gaussian model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"","code":"gaussianmodified_2006(temp, rmax, topt, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"temp temperature degrees centigrade rmax maximum rate optimum temperature topt optimum temperature related full curve width b allows asymmetry curve fit","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"Equation: $$rate = r_{max} \\cdot \\exp{\\bigg[-0.5 \\left(\\frac{|temp-t_{opt}|}{}\\right)^b\\bigg]}$$ Start values get_start_vals derived data gaussian_1987 Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"Generally found model difficult fit. function previously called modifiedgaussian_2006() however now deprecated removed future.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"Angilletta Jr, M. J. (2006). Estimating comparing thermal performance curves. Journal Thermal Biology, 31(7), 541-545.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/gaussianmodified_2006.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Modified gaussian model for fitting thermal performance curves — gaussianmodified_2006","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'gaussianmodified_2006') # fit model mod <- nls.multstart::nls_multstart(rate~gaussianmodified_2006(temp = temp, rmax, topt, a, b), data = d, iter = c(3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'gaussianmodified_2006'), upper = get_upper_lims(d$temp, d$rate, model_name = 'gaussianmodified_2006'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ gaussianmodified_2006(temp = temp, rmax, topt, a, b) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> rmax   1.0016     2.0083   0.499    0.631     #> topt  37.0000     2.7728  13.344 9.51e-07 *** #> a     23.0120    90.9028   0.253    0.807     #> b      0.7888     7.1214   0.111    0.915     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.5851 on 8 degrees of freedom #>  #> Number of iterations to convergence: 20  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_breadth.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate thermal performance breadth of a thermal performance curve — get_breadth","title":"Estimate thermal performance breadth of a thermal performance curve — get_breadth","text":"Estimate thermal performance breadth thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_breadth.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate thermal performance breadth of a thermal performance curve — get_breadth","text":"","code":"get_breadth(model, level = 0.8)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_breadth.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate thermal performance breadth of a thermal performance curve — get_breadth","text":"model nls model object contains model thermal performance curve level proportion maximum rate thermal performance breadth calculated","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_breadth.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate thermal performance breadth of a thermal performance curve — get_breadth","text":"Numeric estimate thermal performance breadth (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_breadth.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate thermal performance breadth of a thermal performance curve — get_breadth","text":"Thermal performance breadth calculated range temperatures curve's rate least 0.8 peak. defaults proportion 0.8 can changed using level argument.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the critical thermal maximum of a thermal performance curve — get_ctmax","title":"Estimate the critical thermal maximum of a thermal performance curve — get_ctmax","text":"Estimate critical thermal maximum thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the critical thermal maximum of a thermal performance curve — get_ctmax","text":"","code":"get_ctmax(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the critical thermal maximum of a thermal performance curve — get_ctmax","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the critical thermal maximum of a thermal performance curve — get_ctmax","text":"Numeric estimate critical thermal maximum (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the critical thermal maximum of a thermal performance curve — get_ctmax","text":"Critical thermal maximum calculated predicting temperature range 50 ºC beyond maximum value dataset. predicted rate value closest 0 extracted. impossible due curve formula (.e Sharpe-Schoolfield model), temperature rate 5 percent maximum rate estimated. Predictions done every 0.001 ºC estimate critical thermal maximum accurate 0.001 ºC.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmin.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the critical thermal minimum of a thermal performance curve — get_ctmin","title":"Estimate the critical thermal minimum of a thermal performance curve — get_ctmin","text":"Estimate critical thermal minimum thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the critical thermal minimum of a thermal performance curve — get_ctmin","text":"","code":"get_ctmin(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the critical thermal minimum of a thermal performance curve — get_ctmin","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the critical thermal minimum of a thermal performance curve — get_ctmin","text":"Numeric estimate critical thermal minimum (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_ctmin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the critical thermal minimum of a thermal performance curve — get_ctmin","text":"Optimum temperature calculated predicting temperature range 50 degrees lower minimum value dataset. predicted rate value closest 0 extracted. impossible due curve formula (.e Sharpe-Schoolfield model), temperature rate 5 percent maximum rate estimated. Predictions done every 0.001 ºC value estimate critical thermal minimum accurate 0.001 ºC.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_e.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the activation energy of a thermal performance curve — get_e","title":"Estimate the activation energy of a thermal performance curve — get_e","text":"Estimate activation energy thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_e.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the activation energy of a thermal performance curve — get_e","text":"","code":"get_e(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_e.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the activation energy of a thermal performance curve — get_e","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_e.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the activation energy of a thermal performance curve — get_e","text":"Numeric estimate activation energy (eV)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_e.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the activation energy of a thermal performance curve — get_e","text":"Fits modified-Boltzmann equation raw data optimum temperature (ºC; estimated get_topt).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_eh.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the deactivation energy of a thermal performance curve — get_eh","title":"Estimate the deactivation energy of a thermal performance curve — get_eh","text":"Estimate deactivation energy thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_eh.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the deactivation energy of a thermal performance curve — get_eh","text":"","code":"get_eh(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_eh.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the deactivation energy of a thermal performance curve — get_eh","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_eh.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the deactivation energy of a thermal performance curve — get_eh","text":"Numeric estimate activation energy (eV)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_eh.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the deactivation energy of a thermal performance curve — get_eh","text":"Fits modified-Boltzmann equation raw data beyond optimum temperature (ºC; estimated get_topt).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_lower_lims.html","id":null,"dir":"Reference","previous_headings":"","what":"Set broad lower limits on parameter values — get_lower_lims","title":"Set broad lower limits on parameter values — get_lower_lims","text":"Sets wide lower limits parameter values TPC model","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_lower_lims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set broad lower limits on parameter values — get_lower_lims","text":"","code":"get_lower_lims(x, y, model_name)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_lower_lims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set broad lower limits on parameter values — get_lower_lims","text":"x vector temperature values y vector rate values model_name name model fitted","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_lower_lims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set broad lower limits on parameter values — get_lower_lims","text":"Named list lower limits given data model fitted","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_lower_lims.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set broad lower limits on parameter values — get_lower_lims","text":"Daniel Padfield Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_model_names.html","id":null,"dir":"Reference","previous_headings":"","what":"Lists or searches the models available in rTPC — get_model_names","title":"Lists or searches the models available in rTPC — get_model_names","text":"Lists searches models available rTPC","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_model_names.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lists or searches the models available in rTPC — get_model_names","text":"","code":"get_model_names(model, returnall = FALSE)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_model_names.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lists or searches the models available in rTPC — get_model_names","text":"model Optional string (vector strings) representing model/s search . returnall Also return names deprecated functions","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_model_names.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lists or searches the models available in rTPC — get_model_names","text":"character vector thermal performance curves available rTPC","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_model_names.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lists or searches the models available in rTPC — get_model_names","text":"Daniel Padfield Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_model_names.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lists or searches the models available in rTPC — get_model_names","text":"","code":"get_model_names() #>  [1] \"analytiskontodimas_2004\"       \"ashrafi1_2018\"                 #>  [3] \"ashrafi2_2018\"                 \"ashrafi3_2018\"                 #>  [5] \"ashrafi4_2018\"                 \"ashrafi5_2018\"                 #>  [7] \"atkin_2005\"                    \"beta_2012\"                     #>  [9] \"betatypesimplified_2008\"       \"boatman_2017\"                  #> [11] \"briere1_1999\"                  \"briere1simplified_1999\"        #> [13] \"briere2_1999\"                  \"briere2simplified_1999\"        #> [15] \"briereextended_2021\"           \"briereextendedsimplified_2021\" #> [17] \"delong_2017\"                   \"deutsch_2008\"                  #> [19] \"eubank_1973\"                   \"flextpc_2024\"                  #> [21] \"flinn_1991\"                    \"gaussian_1987\"                 #> [23] \"gaussianmodified_2006\"         \"hinshelwood_1947\"              #> [25] \"janisch1_1925\"                 \"janisch2_1925\"                 #> [27] \"joehnk_2008\"                   \"johnsonlewin_1946\"             #> [29] \"kamykowski_1985\"               \"lactin2_1995\"                  #> [31] \"lobry_1991\"                    \"mitchell_2009\"                 #> [33] \"oneill_1972\"                   \"pawar_2018\"                    #> [35] \"quadratic_2008\"                \"ratkowsky_1983\"                #> [37] \"rezende_2019\"                  \"rosso_1993\"                    #> [39] \"sharpeschoolfull_1981\"         \"sharpeschoolhigh_1981\"         #> [41] \"sharpeschoollow_1981\"          \"spain_1982\"                    #> [43] \"stinner_1974\"                  \"taylorsexton_1972\"             #> [45] \"thomas_2012\"                   \"thomas_2017\"                   #> [47] \"tomlinsonphillips_2015\"        \"warrendreyer_2006\"             #> [49] \"weibull_1995\"                  get_model_names(\"briere\") #> [1] \"briere1_1999\"                  \"briere1simplified_1999\"        #> [3] \"briere2_1999\"                  \"briere2simplified_1999\"        #> [5] \"briereextended_2021\"           \"briereextendedsimplified_2021\""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_q10.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate the q10 value of a thermal performance curve — get_q10","title":"Estimate the q10 value of a thermal performance curve — get_q10","text":"Estimate q10 value thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_q10.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate the q10 value of a thermal performance curve — get_q10","text":"","code":"get_q10(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_q10.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate the q10 value of a thermal performance curve — get_q10","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_q10.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate the q10 value of a thermal performance curve — get_q10","text":"Numeric estimate q10 value","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_q10.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate the q10 value of a thermal performance curve — get_q10","text":"Fits q10 portion rezende_2019 raw data optimum temperature (ºC; estimated get_topt).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_rmax.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate maximum rate of a thermal performance curve — get_rmax","title":"Estimate maximum rate of a thermal performance curve — get_rmax","text":"Estimate maximum rate thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_rmax.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate maximum rate of a thermal performance curve — get_rmax","text":"","code":"get_rmax(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_rmax.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate maximum rate of a thermal performance curve — get_rmax","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_rmax.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate maximum rate of a thermal performance curve — get_rmax","text":"Numeric estimate maximum rate","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_rmax.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate maximum rate of a thermal performance curve — get_rmax","text":"Maximum rate calculated predicting temperature range using previously estimated parameters picking maximum rate value. Predictions done every 0.001 ºC.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_skewness.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimates skewness of a thermal performance curve — get_skewness","title":"Estimates skewness of a thermal performance curve — get_skewness","text":"Estimates skewness thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_skewness.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimates skewness of a thermal performance curve — get_skewness","text":"","code":"get_skewness(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_skewness.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimates skewness of a thermal performance curve — get_skewness","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_skewness.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimates skewness of a thermal performance curve — get_skewness","text":"Numeric estimate skewness","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_skewness.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimates skewness of a thermal performance curve — get_skewness","text":"Skewness calculated values activation energy (e) deactivation energy (eh) : skewness = e - eh. negative skewness indicates TPC left skewed, drop optimum steeper rise optimum. positive skewness means TPC right skewed value 0 mean curve symmetrical around optimum.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_start_vals.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate start values for TPC fitting — get_start_vals","title":"Estimate start values for TPC fitting — get_start_vals","text":"Estimates sensible start values fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_start_vals.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate start values for TPC fitting — get_start_vals","text":"","code":"get_start_vals(x, y, model_name)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_start_vals.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate start values for TPC fitting — get_start_vals","text":"x vector temperature values y vector rate values model_name name model fitted","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_start_vals.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate start values for TPC fitting — get_start_vals","text":"Named list start parameters given data model fitted","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_start_vals.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate start values for TPC fitting — get_start_vals","text":"Daniel Padfield Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermalsafetymargin.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate thermal safety margin of a thermal performance curve — get_thermalsafetymargin","title":"Estimate thermal safety margin of a thermal performance curve — get_thermalsafetymargin","text":"Estimate thermal safety margin thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermalsafetymargin.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate thermal safety margin of a thermal performance curve — get_thermalsafetymargin","text":"","code":"get_thermalsafetymargin(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermalsafetymargin.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate thermal safety margin of a thermal performance curve — get_thermalsafetymargin","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermalsafetymargin.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate thermal safety margin of a thermal performance curve — get_thermalsafetymargin","text":"Numeric estimate thermal safety margin (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermalsafetymargin.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate thermal safety margin of a thermal performance curve — get_thermalsafetymargin","text":"Thermal safety margin calculated : CTmax - Topt. calculated using functions get_ctmax get_topt.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermaltolerance.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate thermal tolerance of a thermal performance curve — get_thermaltolerance","title":"Estimate thermal tolerance of a thermal performance curve — get_thermaltolerance","text":"Estimate thermal tolerance thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermaltolerance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate thermal tolerance of a thermal performance curve — get_thermaltolerance","text":"","code":"get_thermaltolerance(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermaltolerance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate thermal tolerance of a thermal performance curve — get_thermaltolerance","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermaltolerance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate thermal tolerance of a thermal performance curve — get_thermaltolerance","text":"Thermal tolerance (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_thermaltolerance.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate thermal tolerance of a thermal performance curve — get_thermaltolerance","text":"Thermal tolerance calculated : CTmax - CTmin. calculated using functions get_ctmax get_ctmin.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_topt.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate optimum temperature of a thermal performance curve — get_topt","title":"Estimate optimum temperature of a thermal performance curve — get_topt","text":"Estimate optimum temperature thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_topt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate optimum temperature of a thermal performance curve — get_topt","text":"","code":"get_topt(model)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_topt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate optimum temperature of a thermal performance curve — get_topt","text":"model nls model object contains model thermal performance curve","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_topt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate optimum temperature of a thermal performance curve — get_topt","text":"Numeric estimate optimum temperature (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_topt.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate optimum temperature of a thermal performance curve — get_topt","text":"Optimum temperature (ºC) calculated predicting temperature range using previously estimated parameters keeping temperature largest rate value occurs. Predictions done every 0.001 ºC estimate optimum temperature accurate 0.001 ºC.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_upper_lims.html","id":null,"dir":"Reference","previous_headings":"","what":"Set broad upper limits on parameter values — get_upper_lims","title":"Set broad upper limits on parameter values — get_upper_lims","text":"Sets wide upper limits parameter values TPC model","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_upper_lims.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Set broad upper limits on parameter values — get_upper_lims","text":"","code":"get_upper_lims(x, y, model_name)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_upper_lims.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Set broad upper limits on parameter values — get_upper_lims","text":"x vector temperature values y vector rate values model_name name model fitted","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_upper_lims.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Set broad upper limits on parameter values — get_upper_lims","text":"Named list upper limits given data model fitted","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/get_upper_lims.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Set broad upper limits on parameter values — get_upper_lims","text":"Daniel Padfield Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":null,"dir":"Reference","previous_headings":"","what":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"Hinshelwood model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"","code":"hinshelwood_1947(temp, a, e, b, eh)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"temp temperature degrees centigrade pre-exponential constant activation energy e activation energy (eV) b pre-exponential constant deactivation energy eh de-activation energy (eV)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"Equation: $$rate=\\cdot exp^{\\frac{-e}{k \\cdot (temp + 273.15)}} - b \\cdot exp^\\frac{-e_h}{k \\cdot (temp + 273.15)}$$ k Boltzmann's constant value 8.62e-05 Start values get_start_vals taken literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"Generally found model difficult fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"Hinshelwood C.N. Chemical Kinetics Bacterial Cell. Oxford University Press. (1947)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/hinshelwood_1947.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Hinshelwood model for fitting thermal performance curves — hinshelwood_1947","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'hinshelwood_1947') # fit model mod <- nls.multstart::nls_multstart(rate~hinshelwood_1947(temp = temp,a, e, b, eh), data = d, iter = c(5,5,5,5), start_lower = start_vals - 1, start_upper = start_vals + 1, lower = get_lower_lims(d$temp, d$rate, model_name = 'hinshelwood_1947'), upper = get_upper_lims(d$temp, d$rate, model_name = 'hinshelwood_1947'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ hinshelwood_1947(temp = temp, a, e, b, eh) #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|) #> a  1.104e+10  2.531e+11   0.044    0.966 #> e  6.045e-01  5.823e-01   1.038    0.330 #> b  1.478e+26  9.725e+27   0.015    0.988 #> eh 1.635e+00  1.878e+00   0.870    0.409 #>  #> Residual standard error: 0.3846 on 8 degrees of freedom #>  #> Number of iterations till stop: 96  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 500. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":null,"dir":"Reference","previous_headings":"","what":"Janisch I model for fitting thermal performance curves — janisch1_1925","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"Janisch model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"","code":"janisch1_1925(temp, m, a, topt)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"temp temperature degrees centigrade m scale parameter (controlling height curve) shape parameter (controlling shape curve) topt temperature max performance (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"Equation: $$rate = \\frac{1}{\\frac{m}{2} \\cdot \\left[^{T-T_{\\text{opt}}}+^{-(T-T_{\\text{opt}})}\\right]}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"Janisch, E. Über die Temperaturabhängigkeit biologischer Vorgänge und ihre kurvenmäßige Analyse. Pflüger's Arch. Physiol. 209, 414–436 (1925).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch1_1925.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Janisch I model for fitting thermal performance curves — janisch1_1925","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'janisch1_1925') # fit model mod <- nls.multstart::nls_multstart(rate~janisch1_1925(temp = temp, m, a, topt), data = d, iter = 200, start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'janisch1_1925'), upper = get_upper_lims(d$temp, d$rate, model_name = 'janisch1_1925'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ janisch1_1925(temp = temp, m, a, topt) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> m     0.64569    0.09142   7.063 5.90e-05 *** #> a     1.18104    0.03858  30.614 2.07e-10 *** #> topt 36.81111    1.12499  32.721 1.14e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.329 on 9 degrees of freedom #>  #> Number of iterations to convergence: 25  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":null,"dir":"Reference","previous_headings":"","what":"Janisch II model for fitting thermal performance curves — janisch2_1925","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"Janisch II model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"","code":"janisch2_1925(temp, m, a, b, topt)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"temp temperature degrees centigrade m scale parameter (controlling height curve) shape parameter (controlling shape rising part curve) b shape parameter (controlling shape falling part curve) topt temperature max performance (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"Equation: $$rate = \\frac{1}{\\frac{m}{2} \\cdot \\left[^{T-T_{\\text{opt}}}+b^{-(T-T_{\\text{opt}})}\\right]}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"Janisch, E. Über die Temperaturabhängigkeit biologischer Vorgänge und ihre kurvenmäßige Analyse. Pflüger's Arch. Physiol. 209, 414–436 (1925).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/janisch2_1925.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Janisch II model for fitting thermal performance curves — janisch2_1925","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'janisch2_1925') # fit model mod <- nls.multstart::nls_multstart(rate~janisch2_1925(temp = temp, m, a, b, topt), data = d, iter = 200, start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'janisch2_1925'), upper = get_upper_lims(d$temp, d$rate, model_name = 'janisch2_1925'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ janisch2_1925(temp = temp, m, a, b, topt) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> m     0.91049    0.11327   8.038 4.22e-05 *** #> a     4.52758    6.14681   0.737    0.482     #> b     1.07555    0.01398  76.952 9.06e-13 *** #> topt 43.53056    0.54446  79.951 6.68e-13 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2038 on 8 degrees of freedom #>  #> Number of iterations to convergence: 33  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Jöhnk model for fitting thermal performance curves — joehnk_2008","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"Jöhnk model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"","code":"joehnk_2008(temp, rmax, topt, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"temp temperature degrees centigrade rmax rate optimum temperature topt optimum temperatute (ºC) parameter biological meaning b parameter biological meaning c parameter biological meaning","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"Equation: $$rate=r_{max} \\bigg(1 + \\bigg(\\bigg(b^{temp-t_{opt}} -1\\bigg) - \\frac{ln(b)}{ln(c)}(c^{temp-t_{opt}} -1)\\bigg)\\bigg)$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"Joehnk, Klaus D., et al. Summer heatwaves promote blooms harmful cyanobacteria. Global change biology 14.3: 495-512 (2008)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/joehnk_2008.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Jöhnk model for fitting thermal performance curves — joehnk_2008","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'joehnk_2008') # fit model mod <- nls.multstart::nls_multstart(rate~joehnk_2008(temp = temp, rmax, topt, a, b, c), data = d, iter = c(3,3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'joehnk_2008'), upper = get_upper_lims(d$temp, d$rate, model_name = 'joehnk_2008'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ joehnk_2008(temp = temp, rmax, topt, a, b, c) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> rmax 1.357e+00  2.017e-01   6.727 0.000271 *** #> topt 3.837e+01  2.502e+00  15.338 1.21e-06 *** #> a    9.212e+01  2.520e+06   0.000 0.999972     #> b    1.076e+00  2.405e+01   0.045 0.965555     #> c    1.078e+00  2.421e+01   0.045 0.965728     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3609 on 7 degrees of freedom #>  #> Number of iterations till stop: 95  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 600. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":null,"dir":"Reference","previous_headings":"","what":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"Johnson-Lewin model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"","code":"johnsonlewin_1946(temp, r0, e, eh, topt)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"temp temperature degrees centigrade r0 scaling parameter e activation energy (eV) eh high temperature de-activation energy (eV) topt optimum temperature (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"Equation: $$rate= \\frac{r_0 \\cdot exp^{\\frac{-e}{k\\cdot (temp + 273.15)}}}{1 + exp^{-\\frac{e_h -\\big(\\frac{e_h}{(t_{opt} + 273.15)} + k \\cdot ln\\big(\\frac{e}{e_h - e}\\big) \\big) \\cdot (temp + 273.15)}{k \\cdot (temp + 273.15)}}}$$ k Boltzmann's constant value 8.62e-05. Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based  extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"Generally found model difficult fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"Johnson, Frank H., Isaac Lewin. growth rate E. coli relation temperature, quinine coenzyme. Journal Cellular Comparative Physiology 28.1 (1946): 47-75.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/johnsonlewin_1946.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Johnson-Lewin model for fitting thermal performance curves — johnsonlewin_1946","text":"","code":"# \\donttest{ # load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'johnsonlewin_1946') # fit model mod <- suppressWarnings( nls.multstart::nls_multstart(rate~johnsonlewin_1946(temp = temp, r0, e, eh, topt), data = d, iter = c(5,5,5,5), start_lower = start_vals - 1, start_upper = start_vals + 1, lower = get_lower_lims(d$temp, d$rate, model_name = 'johnsonlewin_1946'), upper = get_upper_lims(d$temp, d$rate, model_name = 'johnsonlewin_1946'), supp_errors = 'Y', convergence_count = FALSE) )  # look at model fit summary(mod) #>  #> Formula: rate ~ johnsonlewin_1946(temp = temp, r0, e, eh, topt) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)    #> r0   7.322e+07  3.295e+08   0.222  0.82968    #> e    4.784e-01  1.191e-01   4.016  0.00386 ** #> eh   4.000e+01  5.278e+03   0.008  0.99414    #> topt 4.401e+01  2.324e+02   0.189  0.85453    #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2406 on 8 degrees of freedom #>  #> Number of iterations to convergence: 94  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()  # }"},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":null,"dir":"Reference","previous_headings":"","what":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"Kamykowski model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"","code":"kamykowski_1985(temp, tmin, tmax, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative parameter biological meaning b parameter biological meaning c parameter biological meaning","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"Equation: $$rate= \\cdot \\big( 1 - exp^{-b\\cdot \\big(temp-t_{min}\\big)}\\big) \\cdot \\big( 1-exp^{-c \\cdot \\big(t_{max}-temp\\big)}\\big)$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"Kamykowski, Daniel. survey protozoan laboratory temperature studies applied marine dinoflagellate behaviour field perspective. Contributions Marine Science. (1985).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/kamykowski_1985.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Kamykowski model for fitting thermal performance curves — kamykowski_1985","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'kamykowski_1985') # fit model mod <- nls.multstart::nls_multstart(rate~kamykowski_1985(temp = temp, tmin, tmax, a, b, c), data = d, iter = c(3,3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'kamykowski_1985'), upper = get_upper_lims(d$temp, d$rate, model_name = 'kamykowski_1985'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ kamykowski_1985(temp = temp, tmin, tmax, a, b, c) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> tmin 1.634e+01  3.690e+00   4.429  0.00305 **  #> tmax 4.881e+01  1.019e+00  47.895 4.53e-10 *** #> a    1.000e+02  2.668e+04   0.004  0.99711     #> b    8.469e-04  2.267e-01   0.004  0.99712     #> c    1.214e-01  4.227e-01   0.287  0.78233     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3717 on 7 degrees of freedom #>  #> Number of iterations till stop: 96  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 600. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":null,"dir":"Reference","previous_headings":"","what":"Lactin2 model for fitting thermal performance curves — lactin2_1995","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"Lactin2 model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"","code":"lactin2_1995(temp, a, b, tmax, delta_t)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"temp temperature degrees centigrade constant determines steepness rising portion curve b constant determines height overall curve tmax temperature curve begins decelerate beyond optimum (ºC) delta_t thermal safety margin (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"Equation: $$rate= = exp^{\\cdot temp} - exp^{\\cdot t_{max} - \\bigg(\\frac{t_{max} - temp}{\\delta _{t}}\\bigg)} + b$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"Lactin, D.J., Holliday, N.J., Johnson, D.L. & Craigen, R. Improved rate models temperature-dependent development arthropods. Environmental Entomology 24, 69-75 (1995)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lactin2_1995.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lactin2 model for fitting thermal performance curves — lactin2_1995","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'lactin2_1995') # fit model mod <- nls.multstart::nls_multstart(rate~lactin2_1995(temp = temp, a, b, tmax, delta_t), data = d, iter = c(3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'lactin2_1995'), upper = get_upper_lims(d$temp, d$rate, model_name = 'lactin2_1995'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ lactin2_1995(temp = temp, a, b, tmax, delta_t) #>  #> Parameters: #>         Estimate Std. Error t value Pr(>|t|)     #> a        0.06598    0.06421   1.027    0.334     #> b       -1.33668    2.12052  -0.630    0.546     #> tmax    51.81297    5.02660  10.308 6.77e-06 *** #> delta_t 11.91689    0.92791  12.843 1.28e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3378 on 8 degrees of freedom #>  #> Number of iterations to convergence: 42  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":null,"dir":"Reference","previous_headings":"","what":"Lobry model for fitting thermal performance curves — lobry_1991","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"Lobry model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"","code":"lobry_1991(temp, rmax, topt, tmin, tmax)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"temp temperature degrees centigrade rmax maximum rate topt optimum temperature (ºC) rates maximal tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"Equation: $$rate = rmax \\cdot (1 - \\frac{(temp - topt)^2)}{(temp - topt)^2 + temp \\cdot (tmax + tmin - temp) - tmax \\cdot tmin}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"Lobry, J. R., Rosso, L., & Flandrois, J. P. (1991). FORTRAN subroutine determination parameter confidence limits non-linear models. Binary, 3(86-93), 25.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/lobry_1991.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Lobry model for fitting thermal performance curves — lobry_1991","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'lobry_1991') # fit model mod <- nls.multstart::nls_multstart(rate~lobry_1991(temp = temp, rmax, topt, tmin, tmax), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'lobry_1991'), upper = get_upper_lims(d$temp, d$rate, model_name = 'lobry_1991'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ lobry_1991(temp = temp, rmax, topt, tmin, tmax) #>  #> Parameters: #>       Estimate Std. Error   t value Pr(>|t|)     #> rmax 1.272e+00  3.462e-01 3.675e+00  0.00626 **  #> topt 3.803e+01  2.721e+00 1.398e+01 6.65e-07 *** #> tmin 1.600e+01  6.369e-18 2.512e+18  < 2e-16 *** #> tmax 4.902e+01  1.331e+00 3.684e+01 3.23e-10 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3619 on 8 degrees of freedom #>  #> Number of iterations to convergence: 27  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":null,"dir":"Reference","previous_headings":"","what":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"Mitchell Angilletta model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"","code":"mitchell_2009(temp, topt, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"temp temperature degrees centigrade topt optimum temperature (ºC) rate maximal scale parameter convert value cosine density appropriate magnitude b parameter dictating performance breadth","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"Equation: $$rate=\\frac{1}{2 \\cdot b} \\cdot (1 + cos(\\frac{temp - t_{opt}}{b} \\cdot \\pi)) \\cdot $$ temperatures fall topt - b topt + b, rates set 0 prevent multimodality. Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"Mitchell, W. ., & Angilletta Jr, M. J. (2009). Thermal games: frequency-dependent models thermal adaptation. Functional Ecology, 510-520.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/mitchell_2009.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Mitchell Angilletta model for fitting thermal performance curves — mitchell_2009","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'mitchell_2009') # fit model mod <- nls.multstart::nls_multstart(rate~mitchell_2009(temp = temp, topt, a, b), data = d, iter = c(3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'mitchell_2009'), upper = get_upper_lims(d$temp, d$rate, model_name = 'mitchell_2009'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ mitchell_2009(temp = temp, topt, a, b) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> topt   36.090      1.053  34.275 7.56e-11 *** #> a      25.789      3.291   7.837 2.61e-05 *** #> b      17.530      2.366   7.410 4.06e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.333 on 9 degrees of freedom #>  #> Number of iterations to convergence: 38  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":null,"dir":"Reference","previous_headings":"","what":"O'Neill model for fitting thermal performance curves — oneill_1972","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"O'Neill model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"","code":"oneill_1972(temp, rmax, ctmax, topt, q10)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"temp temperature degrees centigrade rmax maximum rate optimum temperature ctmax high temperature (ºC) rates become negative topt optimum temperature (ºC) q10 defines fold change performance result increasing temperature 10 ºC","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"Equation: $$rate = r_{max} \\cdot \\bigg(\\frac{ct_{max} - temp}{ct_{max} - t_{opt}}\\bigg)^{x} \\cdot exp^{x \\cdot \\frac{temp - t_{opt}}{ct_{max} - t_{opt}}}$$ $$: x = \\frac{w^{2}}{400}\\cdot\\bigg(1 + \\sqrt{1 + \\frac{40}{w}}\\bigg)^{2}$$ $$:\\ w = (q_{10} - 1)\\cdot (ct_{max} - t_{opt})$$ Start values get_start_vals derived data previous values literature Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"O’Neill, R.V., Goldstein, R.., Shugart, H.H., Mankin, J.B. Terrestrial Ecosystem Energy Model. Eastern Deciduous Forest Biome Memo Report Oak Ridge. Environmental Sciences Division Oak Ridge National Laboratory. (1972)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/oneill_1972.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"O'Neill model for fitting thermal performance curves — oneill_1972","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'oneill_1972') # fit model mod <- nls.multstart::nls_multstart(rate~oneill_1972(temp = temp, rmax, ctmax, topt, q10), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'oneill_1972'), upper = get_upper_lims(d$temp, d$rate, model_name = 'oneill_1972'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ oneill_1972(temp = temp, rmax, ctmax, topt, q10) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> rmax    1.5550     0.1627   9.555 1.19e-05 *** #> ctmax  49.0000     5.1139   9.582 1.17e-05 *** #> topt   37.6725     1.3291  28.344 2.59e-09 *** #> q10     1.9206     0.2243   8.562 2.67e-05 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2657 on 8 degrees of freedom #>  #> Number of iterations to convergence: 47  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":null,"dir":"Reference","previous_headings":"","what":"Pawar model for fitting thermal performance curves — pawar_2018","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"Pawar model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"","code":"pawar_2018(temp, r_tref, e, eh, topt, tref)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"temp temperature degrees centigrade r_tref rate standardised temperature, tref e activation energy (eV) eh high temperature de-activation energy (eV) topt optimum temperature (ºC) tref standardisation temperature degrees centigrade. Temperature rates inactivated high temperatures","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"model modified version sharpeschoolhigh_1981 explicitly models optimum temperature. Equation: $$rate= \\frac{r_{tref} \\cdot exp^{\\frac{-e}{k} (\\frac{1}{temp + 273.15}-\\frac{1}{t_{ref} + 273.15})}}{1 + (\\frac{e}{eh - e}) \\cdot exp^{\\frac{e_h}{k}(\\frac{1}{t_opt + 273.15}-\\frac{1}{temp + 273.15})}}$$ k Boltzmann's constant value 8.62e-05. Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based  extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"Kontopoulos, Dimitrios - Georgios, Bernardo García-Carreras, Sofía Sal, Thomas P. Smith, Samraat Pawar. Use Misuse Temperature Normalisation Meta-Analyses Thermal Responses Biological Traits. PeerJ. 6 (2018),","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/pawar_2018.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Pawar model for fitting thermal performance curves — pawar_2018","text":"","code":"# load in ggplot library(ggplot2) library(nls.multstart)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'pawar_2018') # fit model mod <- nls_multstart(rate~pawar_2018(temp = temp, r_tref, e, eh, topt, tref = 20), data = d, iter = c(3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'pawar_2018'), upper = get_upper_lims(d$temp, d$rate, model_name = 'pawar_2018'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ pawar_2018(temp = temp, r_tref, e, eh, topt, tref = 20) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)     #> r_tref  0.38722    0.08016   4.831 0.001303 **  #> e       0.58264    0.10186   5.720 0.000444 *** #> eh     14.20311   12.83602   1.107 0.300668     #> topt   41.64610    0.77956  53.423 1.67e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1982 on 8 degrees of freedom #>  #> Number of iterations to convergence: 21  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":null,"dir":"Reference","previous_headings":"","what":"Quadratic model for fitting thermal performance curves — quadratic_2008","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"Quadratic model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"","code":"quadratic_2008(temp, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"temp temperature degrees centigrade parameter defines rate 0 ºC b parameter biological meaning c parameter biological meaning","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"Equation: $$rate = + b \\cdot temp + c \\cdot temp^2$$ Start values get_start_vals derived data using previous methods literature Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"Montagnes, David JS, et al. Short‐term temperature change may impact freshwater carbon flux: microbial perspective. Global Change Biology 14.12: 2823-2838. (2008)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/quadratic_2008.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Quadratic model for fitting thermal performance curves — quadratic_2008","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'quadratic_2008') # fit model mod <- nls.multstart::nls_multstart(rate~quadratic_2008(temp = temp, a, b, c), data = d, iter = c(4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'quadratic_2008'), upper = get_upper_lims(d$temp, d$rate, model_name = 'quadratic_2008'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ quadratic_2008(temp = temp, a, b, c) #>  #> Parameters: #>    Estimate Std. Error t value Pr(>|t|)    #> a -3.785505   1.240225  -3.052  0.01374 *  #> b  0.291596   0.081480   3.579  0.00594 ** #> c -0.004248   0.001241  -3.423  0.00760 ** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.4081 on 9 degrees of freedom #>  #> Number of iterations to convergence: 5  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":null,"dir":"Reference","previous_headings":"","what":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"Ratkowsky model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"","code":"ratkowsky_1983(temp, tmin, tmax, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"temp temperature degrees centigrade tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative parameter defined sqrt(rate)/(temp - tmin) b empirical parameter needed fit data temperatures beyond optimum temperature","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"Equation: $$rate = (\\cdot (temp-t_{min}))^2 \\cdot (1-exp(b \\cdot (temp-t_{max})))^2$$ Start values get_start_vals derived data previous values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"Ratkowsky, D.., Lowry, R.K., McMeekin, T.., Stokes, .N., Chandler, R.E., Model bacterial growth rate throughout entire biokinetic temperature range. J. Bacteriol. 154: 1222–1226 (1983)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/ratkowsky_1983.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Ratkowsky model for fitting thermal performance curves — ratkowsky_1983","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'ratkowsky_1983') # fit model mod <- nls.multstart::nls_multstart(rate~ratkowsky_1983(temp = temp, tmin, tmax, a, b), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'ratkowsky_1983'), upper = get_upper_lims(d$temp, d$rate, model_name = 'ratkowsky_1983'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ ratkowsky_1983(temp = temp, tmin, tmax, a, b) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> tmin  9.51995    4.60886   2.066  0.07273 .   #> tmax 47.93852    0.32095 149.366 4.51e-15 *** #> a     0.04841    0.01163   4.162  0.00316 **  #> b     0.22857    0.06129   3.729  0.00579 **  #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2244 on 8 degrees of freedom #>  #> Number of iterations to convergence: 43  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":null,"dir":"Reference","previous_headings":"","what":"Rezende model for fitting thermal performance curves — rezende_2019","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"Rezende model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"","code":"rezende_2019(temp, q10, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"temp temperature degrees centigrade q10 defines fold change performance result increasing temperature 10 ºC parameter describing shifts rate b parameter threshold temperature (ºC) beyond downward curve starts c parameter controlling rate decline beyond threshold temperature, b","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"Equation: $$\\textrm{} \\quad temp < b: rate = \\cdot 10 ^{\\frac{\\log_{10} (q_{10})}{(\\frac{10}{temp})}}$$ $$\\textrm{} \\quad temp > b: rate = \\cdot 10 ^{\\frac{\\log_{10} (q_{10})}{(\\frac{10}{temp})}} \\cdot \\bigg(1-c \\cdot (b-temp)^2 \\bigg)$$ Start values get_start_vals derived data previous values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"Rezende, Enrico L., Francisco Bozinovic. Thermal performance across levels biological organization. Philosophical Transactions Royal Society B 374.1778 (2019): 20180549.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rezende_2019.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rezende model for fitting thermal performance curves — rezende_2019","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'rezende_2019') # fit model mod <- nls.multstart::nls_multstart(rate~rezende_2019(temp = temp, q10, a, b, c), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'rezende_2019'), upper = get_upper_lims(d$temp, d$rate, model_name = 'rezende_2019'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ rezende_2019(temp = temp, q10, a, b, c) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|) #> q10  2.194462   1.646887   1.332    0.219 #> a    0.087894   0.162598   0.541    0.604 #> b   27.888234  34.821536   0.801    0.446 #> c    0.002319   0.007783   0.298    0.773 #>  #> Residual standard error: 0.3618 on 8 degrees of freedom #>  #> Number of iterations to convergence: 38  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":null,"dir":"Reference","previous_headings":"","what":"Rosso model for fitting thermal performance curves — rosso_1993","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"Rosso model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"","code":"rosso_1993(temp, rmax, topt, tmin, tmax)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"temp temperature degrees centigrade rmax maximum rate optimum temperature topt optimum temperature (ºC) tmin low temperature (ºC) rates become negative tmax high temperature (ºC) rates become negative","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"Equation: $$rate=  rmax \\cdot \\frac{(temp - t_{max}) \\cdot (temp - t_{min})^2}{(t_{opt} - t_{min}) \\cdot ((t_{opt} - t_{min}) \\cdot (temp - t_{opt}) - (t_{opt} - t_{max}) \\cdot (t_{opt} + t_{min} - 2 \\cdot temp))}$$ Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based  extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"Rosso, L., Lobry, J. R., & Flandrois, J. P.  unexpected correlation cardinal temperatures microbial growth highlighted new model. Journal Theoretical Biology, 162(4), 447-463. (1993)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/rosso_1993.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rosso model for fitting thermal performance curves — rosso_1993","text":"","code":"# load in ggplot library(ggplot2) library(nls.multstart)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'rosso_1993') # fit model mod <- nls_multstart(rate~lrf_1991(temp = temp, rmax, topt, tmin, tmax), data = d, iter = c(3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'rosso_1993'), upper = get_upper_lims(d$temp, d$rate, model_name = 'rosso_1993'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ lrf_1991(temp = temp, rmax, topt, tmin, tmax) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> rmax   1.3962     0.1607   8.688 2.40e-05 *** #> topt  37.7416     2.0042  18.831 6.54e-08 *** #> tmin  14.0262     5.8327   2.405   0.0429 *   #> tmax  48.7822     0.9827  49.643 3.00e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3253 on 8 degrees of freedom #>  #> Number of iterations to convergence: 38  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":null,"dir":"Reference","previous_headings":"","what":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"Full Sharpe-Schoolfield model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"","code":"sharpeschoolfull_1981(temp, r_tref, e, el, tl, eh, th, tref)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"temp temperature degrees centigrade r_tref rate standardised temperature, tref e activation energy (eV) el low temperature de-activation energy (eV) tl temperature (ºC) enzyme 1/2 active 1/2 suppressed due low temperatures eh high temperature de-activation energy (eV) th temperature (ºC) enzyme 1/2 active 1/2 suppressed due high temperatures tref standardisation temperature degrees centigrade. Temperature rates inactivated either high low temperatures","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"Equation: $$rate= \\frac{r_{tref} \\cdot exp^{\\frac{-e}{k} (\\frac{1}{temp + 273.15}-\\frac{1}{t_{ref} + 273.15})}}{1+ exp^{\\frac{e_l}{k}(\\frac{1}{t_l} - \\frac{1}{temp + 273.15})} + exp^{\\frac{e_h}{k}(\\frac{1}{t_h}-\\frac{1}{temp + 273.15})}}$$ k Boltzmann's constant value 8.62e-05. Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based  extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"Schoolfield, R. M., Sharpe, P. J. & Magnuson, C. E. Non-linear regression biological temperature-dependent rate models based absolute reaction-rate theory. Journal Theoretical Biology 88, 719-731 (1981)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolfull_1981.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Full Sharpe-Schoolfield model for fitting thermal performance curves — sharpeschoolfull_1981","text":"","code":"# load in ggplot library(ggplot2) library(nls.multstart)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'sharpeschoolfull_1981') # fit model mod <- nls_multstart(rate~sharpeschoolfull_1981(temp = temp, r_tref, e, el, tl, eh, th, tref = 20), data = d, iter = c(3,3,3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'sharpeschoolfull_1981'), upper = get_upper_lims(d$temp, d$rate, model_name = 'sharpeschoolfull_1981'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ sharpeschoolfull_1981(temp = temp, r_tref, e, el, tl,  #>     eh, th, tref = 20) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)     #> r_tref  1.61689    4.91091   0.329   0.7532     #> e       0.02815    1.01715   0.028   0.9788     #> el      1.44338    0.68857   2.096   0.0809 .   #> tl     28.53344   21.51361   1.326   0.2330     #> eh     19.24223   25.84740   0.744   0.4847     #> th     44.01635    1.62324  27.116 1.66e-07 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1831 on 6 degrees of freedom #>  #> Number of iterations to convergence: 38  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":null,"dir":"Reference","previous_headings":"","what":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"Sharpe-Schoolfield model (high temperature inactivation ) fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"","code":"sharpeschoolhigh_1981(temp, r_tref, e, eh, th, tref)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"temp temperature degrees centigrade r_tref rate standardised temperature, tref e activation energy (eV) eh high temperature de-activation energy (eV) th temperature (ºC) enzyme 1/2 active 1/2 suppressed due high temperatures tref standardisation temperature degrees centigrade. Temperature rates inactivated high temperatures","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"Equation: $$rate= \\frac{r_{tref} \\cdot exp^{\\frac{-e}{k} (\\frac{1}{temp + 273.15}-\\frac{1}{t_{ref} + 273.15})}}{1 + exp^{\\frac{e_h}{k}(\\frac{1}{t_h}-\\frac{1}{temp + 273.15})}}$$ k Boltzmann's constant value 8.62e-05. Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based  extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"Schoolfield, R. M., Sharpe, P. J. & Magnuson, C. E. Non-linear regression biological temperature-dependent rate models based absolute reaction-rate theory. J. Theor. Biol. 88, 719-731 (1981)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoolhigh_1981.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sharpe-Schoolfield model (high temperature inactivation only) for fitting thermal performance curves — sharpeschoolhigh_1981","text":"","code":"# load in ggplot library(ggplot2) library(nls.multstart)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981') # fit model mod <- nls_multstart(rate~sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th, tref = 20), data = d, iter = c(3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981'), upper = get_upper_lims(d$temp, d$rate, model_name = 'sharpeschoolhigh_1981'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ sharpeschoolhigh_1981(temp = temp, r_tref, e, eh, th,  #>     tref = 20) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)     #> r_tref  0.38722    0.08016   4.831 0.001303 **  #> e       0.58264    0.10186   5.720 0.000444 *** #> eh     14.20311   12.83602   1.107 0.300668     #> th     43.55313    0.57795  75.357 1.07e-12 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.1982 on 8 degrees of freedom #>  #> Number of iterations to convergence: 29  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":null,"dir":"Reference","previous_headings":"","what":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"Sharpe-Schoolfield model (low temperature inactivation ) fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"","code":"sharpeschoollow_1981(temp, r_tref, e, el, tl, tref)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"temp temperature degrees centigrade r_tref rate standardised temperature, tref e activation energy (eV) el low temperature de-activation energy (eV) tl temperature (ºC) enzyme 1/2 active 1/2 suppressed due low temperatures tref standardisation temperature degrees centigrade. Temperature rates inactivated high temperatures","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"Equation: $$rate= \\frac{r_{tref} \\cdot exp^{\\frac{-e}{k} (\\frac{1}{temp + 273.15}-\\frac{1}{t_{ref} + 273.15})}}{1 + exp^{\\frac{e_l}{k}(\\frac{1}{t_l} - \\frac{1}{temp + 273.15})}}$$ k Boltzmann's constant value 8.62e-05. Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based  extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"Schoolfield, R. M., Sharpe, P. J. & Magnuson, C. E. Non-linear regression biological temperature-dependent rate models based absolute reaction-rate theory. J. Theor. Biol. 88, 719-731 (1981)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/sharpeschoollow_1981.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Sharpe-Schoolfield model (low temperature inactivation only) for fitting thermal performance curves — sharpeschoollow_1981","text":"","code":"# load in ggplot library(ggplot2) library(nls.multstart)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'sharpeschoollow_1981') # fit model mod <- nls_multstart(rate~sharpeschoollow_1981(temp = temp, r_tref, e, el, tl, tref = 20), data = d, iter = c(3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'sharpeschoollow_1981'), upper = get_upper_lims(d$temp, d$rate, model_name = 'sharpeschoollow_1981'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ sharpeschoollow_1981(temp = temp, r_tref, e, el, tl, tref = 20) #>  #> Parameters: #>        Estimate Std. Error t value Pr(>|t|)   #> r_tref   0.9922     1.0461   0.948   0.3707   #> e        0.0000     0.3799   0.000   1.0000   #> el       3.0121     5.5512   0.543   0.6022   #> tl      23.2575     6.9849   3.330   0.0104 * #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.5702 on 8 degrees of freedom #>  #> Number of iterations to convergence: 45  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":null,"dir":"Reference","previous_headings":"","what":"Spain model for fitting thermal performance curves — spain_1982","title":"Spain model for fitting thermal performance curves — spain_1982","text":"Spain model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Spain model for fitting thermal performance curves — spain_1982","text":"","code":"spain_1982(temp, a, b, c, r0)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Spain model for fitting thermal performance curves — spain_1982","text":"temp temperature degrees centigrade constant determines steepness rising portion curve b constant determines position topt c constant determines steepness decreasing part curve r0 apparent rate 0 ºC","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Spain model for fitting thermal performance curves — spain_1982","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Spain model for fitting thermal performance curves — spain_1982","text":"Equation: $$rate = r_0 \\cdot exp^{\\cdot temp} \\cdot (1-b \\cdot exp^{c \\cdot temp})$$ Start values get_start_vals derived data plucked thin air. Limits get_lower_lims get_upper_lims derived data plucked thin air.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Spain model for fitting thermal performance curves — spain_1982","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Spain model for fitting thermal performance curves — spain_1982","text":"BASIC Microcomputer Models Biology. Addison-Wesley, Reading, MA. 1982","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/spain_1982.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Spain model for fitting thermal performance curves — spain_1982","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'spain_1982') # fit model mod <- nls.multstart::nls_multstart(rate~spain_1982(temp = temp, a, b, c, r0), data = d, iter = c(3,3,3,3), start_lower = start_vals - 1, start_upper = start_vals + 1, lower = get_lower_lims(d$temp, d$rate, model_name = 'spain_1982'), upper = get_upper_lims(d$temp, d$rate, model_name = 'spain_1982'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ spain_1982(temp = temp, a, b, c, r0) #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|) #> a  3.414e-02  3.032e-02   1.126    0.293 #> b  1.474e-12  7.972e-11   0.018    0.986 #> c  5.550e-01  1.104e+00   0.503    0.629 #> r0 2.833e-01  2.841e-01   0.997    0.348 #>  #> Residual standard error: 0.5324 on 8 degrees of freedom #>  #> Number of iterations till stop: 97  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 500. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":null,"dir":"Reference","previous_headings":"","what":"Stinner model for fitting thermal performance curves — stinner_1974","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"Stinner model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"","code":"stinner_1974(temp, rmax, topt, a, b)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"temp temperature degrees centigrade rmax maximum rate topt optimum temperature (ºC) rates maximal dimensionless parameter b dimensionless parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"Equation: $$\\textrm{} \\quad temp <= t_{opt}: rate = rmax \\cdot \\frac{1 + exp^{+ b \\cdot t_{opt}}}{(1 + exp^{+ b \\cdot temp}}$$ $$\\textrm{} \\quad temp <= t_{opt}: rate = rmax \\cdot \\frac{1 + exp^{+ b \\cdot t_{opt}}}{(1 + exp^{+ b \\cdot (2 \\cdot t_{opt} - temp)}}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"Stinner, R. E., Gutierrez, . P., & Butler Jr, G. D. (1974). algorithm temperature-dependent growth rate simulation12. Canadian Entomologist, 106(5), 519-524.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"Daniel Padfield","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/stinner_1974.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Stinner model for fitting thermal performance curves — stinner_1974","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'stinner_1974') # fit model mod <- nls.multstart::nls_multstart(rate~stinner_1974(temp = temp, rmax, topt, a, b), data = d, iter = c(5,5,5,5), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'stinner_1974'), upper = get_upper_lims(d$temp, d$rate, model_name = 'stinner_1974'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ stinner_1974(temp = temp, rmax, topt, a, b) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> rmax   1.3561     0.1736   7.813 5.18e-05 *** #> topt  35.8015     0.7858  45.558 5.95e-11 *** #> a     25.1686    14.7144   1.710    0.126     #> b     -0.9365     0.5479  -1.709    0.126     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3192 on 8 degrees of freedom #>  #> Number of iterations till stop: 98  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 500. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":null,"dir":"Reference","previous_headings":"","what":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"Taylor-Sexton model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"","code":"taylorsexton_1972(temp, rmax, tmin, topt)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"temp temperature degrees centigrade rmax maximum performance/value trait tmin low temperature (ºC) rates become negative topt optimum temperature (ºC)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"Equation: $$rate = R_{\\text{max}} \\cdot \\frac{-(T-T_{\\text{min}})^4 + 2 \\cdot (T - T_{\\text{min}})^2 \\cdot (T_{\\text{opt}}-T_{\\text{min}})^2}{(T_{\\text{opt}}-T_{\\text{min}})^4}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"Taylor, S. E. & Sexton, O. J. implications leaf tearing Musaceae. Ecology 53, 143–149 (1972).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/taylorsexton_1972.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Taylor-Sexton model for fitting thermal performance curves — taylorsexton_1972","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'taylorsexton_1972') # fit model mod <- nls.multstart::nls_multstart(rate~taylorsexton_1972(temp = temp, rmax, tmin, topt), data = d, iter = 200, start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'taylorsexton_1972'), upper = get_upper_lims(d$temp, d$rate, model_name = 'taylorsexton_1972'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ taylorsexton_1972(temp = temp, rmax, tmin, topt) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> rmax   1.3960     0.1510   9.248 6.83e-06 *** #> tmin  12.2556     3.0717   3.990  0.00316 **  #> topt  38.0473     0.9169  41.495 1.37e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3055 on 9 degrees of freedom #>  #> Number of iterations to convergence: 12  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":null,"dir":"Reference","previous_headings":"","what":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"Thomas model (2012) fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"","code":"thomas_2012(temp, a, b, c, tref)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"temp temperature degrees centigrade arbitrary constant b arbitrary constant c range temperatures growth rate positive, thermal niche width (ºC) tref determines location maximum quadratic portion function. b = 0, tref equal topt","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"Equation: $$rate = \\cdot exp^{b \\cdot temp} \\bigg(1-\\bigg(\\frac{temp - t_{ref}}{c/2}\\bigg)^2\\bigg)$$ Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"Thomas, Mridul K., et al. global pattern thermal adaptation marine phytoplankton. Science 338.6110, 1085-1088 (2012)","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2012.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thomas model (2012) for fitting thermal performance curves — thomas_2012","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'thomas_2012') # fit model mod <- nls.multstart::nls_multstart(rate~thomas_2012(temp = temp, a, b, c, tref), data = d, iter = c(4,4,4,4), start_lower = start_vals - 1, start_upper = start_vals + 2, lower = get_lower_lims(d$temp, d$rate, model_name = 'thomas_2012'), upper = get_upper_lims(d$temp, d$rate, model_name = 'thomas_2012'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ thomas_2012(temp = temp, a, b, c, tref) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> a     0.20859    0.20466   1.019 0.337937     #> b     0.05296    0.02782   1.904 0.093414 .   #> c    33.30540    4.79114   6.951 0.000118 *** #> tref 32.08003    2.47486  12.962 1.19e-06 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3351 on 8 degrees of freedom #>  #> Number of iterations to convergence: 25  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":null,"dir":"Reference","previous_headings":"","what":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"Thomas model (2017) fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"","code":"thomas_2017(temp, a, b, c, d, e)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"temp temperature degrees centigrade birth rate 0 ºC b describes exponential increase birth rate increasing temperature c temperature-independent mortality term d along e controls exponential increase mortality rates temperature e along d controls exponential increase mortality rates temperature","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"Equation: $$rate = \\cdot exp^{b \\cdot temp} - (c + d \\cdot exp^{e \\cdot temp})$$ Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"Thomas, Mridul K., et al. Temperature–nutrient interactions exacerbate sensitivity warming phytoplankton. Global change biology 23.8 (2017): 3269-3280.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/thomas_2017.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thomas model (2017) for fitting thermal performance curves — thomas_2017","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'thomas_2017') # fit model mod <- nls.multstart::nls_multstart(rate~thomas_2017(temp = temp, a, b, c, d, e), data = d, iter = c(3,3,3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'thomas_2017'), upper = get_upper_lims(d$temp, d$rate, model_name = 'thomas_2017'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ thomas_2017(temp = temp, a, b, c, d, e) #>  #> Parameters: #>     Estimate Std. Error t value Pr(>|t|) #> a -1.046e+01  6.740e+05   0.000    1.000 #> b  7.477e-02  3.390e+01   0.002    0.998 #> c  1.342e+00  1.285e+01   0.104    0.920 #> d -1.106e+01  6.740e+05   0.000    1.000 #> e  7.369e-02  3.379e+01   0.002    0.998 #>  #> Residual standard error: 0.3609 on 7 degrees of freedom #>  #> Number of iterations till stop: 96  #> Achieved convergence tolerance: 1.49e-08 #> Reason stopped: Number of calls to `fcn' has reached or exceeded `maxfev' == 600. #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":null,"dir":"Reference","previous_headings":"","what":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"Tomlinson-Phillips model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"","code":"tomlinsonphillips_2015(temp, a, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"temp temperature degrees centigrade parameter similar R Tmin b shape parameter indicating slope upwards part curve c peak position parameter, similar Topt","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"Equation: $$rate = \\cdot [\\exp{(b \\cdot T) - \\exp{(T-c)}}]$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"Generally found model somewhat difficult fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"Tomlinson, S. & Phillips, R. D. Differences metabolic rate evaporative water loss associated sexual dimorphism thynnine wasps. J. Insect Physiol. 78, 62–68 (2015).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/tomlinsonphillips_2015.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tomlinson-Phillips model for fitting thermal performance curves — tomlinsonphillips_2015","text":"","code":"# \\donttest{ # load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'tomlinsonphillips_2015') # fit model mod <- nls.multstart::nls_multstart(rate~tomlinsonphillips_2015(temp = temp, a, b, c), data = d, iter = c(3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'tomlinsonphillips_2015'), upper = get_upper_lims(d$temp, d$rate, model_name = 'tomlinsonphillips_2015'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ tomlinsonphillips_2015(temp = temp, a, b, c) #>  #> Parameters: #>   Estimate Std. Error t value Pr(>|t|)     #> a  0.32024    0.26234   1.221    0.253     #> b  0.02922    0.02230   1.310    0.223     #> c 47.66374    1.21665  39.176 2.29e-11 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.5378 on 9 degrees of freedom #>  #> Number of iterations to convergence: 81  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()  # }"},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":null,"dir":"Reference","previous_headings":"","what":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"Warren-Dreyer model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"","code":"warrendreyer_2006(temp, rmax, topt, a)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"temp temperature degrees centigrade rmax maximum performance/value trait topt temperature max performance (ºC) shape parameter","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"Equation: $$rate = R_{\\text{max}} \\cdot \\exp{\\left[-0.5 \\cdot \\left(\\frac{\\ln{\\frac{T}{T_{\\text{opt}}}}}{}\\right)^2\\right]}$$ Start values get_start_vals derived data sensible values literature. Limits get_lower_lims get_upper_lims derived data based extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"Warren, C. R. & Dreyer, E. Temperature response photosynthesis internal conductance CO2: results two independent approaches. J. Exp. Bot. 57, 3057–3067 (2006).","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"Francis Windram","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/warrendreyer_2006.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warren-Dreyer model for fitting thermal performance curves — warrendreyer_2006","text":"","code":"# \\donttest{ # load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'warrendreyer_2006') # fit model mod <- nls.multstart::nls_multstart(rate~warrendreyer_2006(temp = temp, rmax, topt, a), data = d, iter = c(3,3,3), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'warrendreyer_2006'), upper = get_upper_lims(d$temp, d$rate, model_name = 'warrendreyer_2006'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ warrendreyer_2006(temp = temp, rmax, topt, a) #>  #> Parameters: #>      Estimate Std. Error t value Pr(>|t|)     #> rmax  1.46485    0.22630   6.473 0.000115 *** #> topt 35.35356    1.31116  26.963 6.43e-10 *** #> a     0.20583    0.04062   5.068 0.000674 *** #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.3732 on 9 degrees of freedom #>  #> Number of iterations to convergence: 29  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()  # }"},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":null,"dir":"Reference","previous_headings":"","what":"Weibull model for fitting thermal performance curves — weibull_1995","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"Weibull model fitting thermal performance curves","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"","code":"weibull_1995(temp, a, topt, b, c)"},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"temp temperature degrees centigrade scale height curve topt optimum temperature b defines breadth curve c defines curve shape","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"numeric vector rate values based temperatures parameter values provided function","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"Equation: $$rate = \\cdot \\bigg( \\frac{c-1}{c}\\bigg)^{\\frac{1-c}{c}}\\bigg(\\frac{temp-t_{opt}}{b}+\\bigg(\\frac{c-1}{c}\\bigg)^{\\frac{1}{c}}\\bigg)^{c-1}exp^{-\\big(\\frac{temp-t_{opt}}{b}+\\big( \\frac{c-1}{c}\\big)^{\\frac{1}{c}}\\big)^c} + \\frac{c-1}{c}$$ Start values get_start_vals derived data. Limits get_lower_lims get_upper_lims derived data based  extreme values unlikely occur ecological settings.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"Generally found model easy fit.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"Angilletta Jr, Michael J. Estimating comparing thermal performance curves. Journal Thermal Biology 31.7 (2006): 541-545.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/reference/weibull_1995.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Weibull model for fitting thermal performance curves — weibull_1995","text":"","code":"# load in ggplot library(ggplot2)  # subset for the first TPC curve data('chlorella_tpc') d <- subset(chlorella_tpc, curve_id == 1)  # get start values and fit model start_vals <- get_start_vals(d$temp, d$rate, model_name = 'weibull_1995') # fit model mod <- nls.multstart::nls_multstart(rate~weibull_1995(temp = temp, a, topt, b, c), data = d, iter = c(4,4,4,4), start_lower = start_vals - 10, start_upper = start_vals + 10, lower = get_lower_lims(d$temp, d$rate, model_name = 'weibull_1995'), upper = get_upper_lims(d$temp, d$rate, model_name = 'weibull_1995'), supp_errors = 'Y', convergence_count = FALSE)  # look at model fit summary(mod) #>  #> Formula: rate ~ weibull_1995(temp = temp, a, topt, b, c) #>  #> Parameters: #>       Estimate Std. Error t value Pr(>|t|)     #> a    1.608e+00  1.833e-01   8.773 2.23e-05 *** #> topt 3.820e+01  8.169e-01  46.761 4.84e-11 *** #> b    6.332e+05  3.842e+08   0.002    0.999     #> c    1.017e+05  6.169e+07   0.002    0.999     #> --- #> Signif. codes:  0 ‘***’ 0.001 ‘**’ 0.01 ‘*’ 0.05 ‘.’ 0.1 ‘ ’ 1 #>  #> Residual standard error: 0.2681 on 8 degrees of freedom #>  #> Number of iterations to convergence: 43  #> Achieved convergence tolerance: 1.49e-08 #>   # get predictions preds <- data.frame(temp = seq(min(d$temp), max(d$temp), length.out = 100)) preds <- broom::augment(mod, newdata = preds)  # plot ggplot(preds) + geom_point(aes(temp, rate), d) + geom_line(aes(temp, .fitted), col = 'blue') + theme_bw()"},{"path":"https://padpadpadpad.github.io/rTPC/news/index.html","id":"rtpc-107-08012024","dir":"Changelog","previous_headings":"","what":"rTPC 1.0.7 08/01/2024","title":"rTPC 1.0.7 08/01/2024","text":"Added many models Reshaped models added start values limits included.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/news/index.html","id":"rtpc-106-19082024","dir":"Changelog","previous_headings":"","what":"rTPC 1.0.6 19/08/2024","title":"rTPC 1.0.6 19/08/2024","text":"Added ashrafi1_2018() package Added … argument calc_params() allow users change level calculation get_breadth() Re-rendered website entirety.","code":""},{"path":"https://padpadpadpad.github.io/rTPC/news/index.html","id":"rtpc-105---08092023","dir":"Changelog","previous_headings":"","what":"rTPC 1.0.5 - 08/09/2023","title":"rTPC 1.0.5 - 08/09/2023","text":"Updated thomas_2012() better lower upper limits tref. Relabelled topt tref rarely reflect optimum temperature Re-rendered website entirety","code":""},{"path":"https://padpadpadpad.github.io/rTPC/news/index.html","id":"rtpc-104---16082023","dir":"Changelog","previous_headings":"","what":"rTPC 1.0.4 - 16/08/2023","title":"rTPC 1.0.4 - 16/08/2023","text":"CRAN release: 2023-08-17 Updated documentation include return value information Accepted onto CRAN","code":""},{"path":"https://padpadpadpad.github.io/rTPC/news/index.html","id":"rtpc-103---10082023","dir":"Changelog","previous_headings":"","what":"rTPC 1.0.3 - 10/08/2023","title":"rTPC 1.0.3 - 10/08/2023","text":"Added modified version Deutsch model package Updated functions include deutsch_2008() model Re-rendered website","code":""},{"path":"https://padpadpadpad.github.io/rTPC/news/index.html","id":"rtpc-102---03122021","dir":"Changelog","previous_headings":"","what":"rTPC 1.0.2 - 03/12/2021","title":"rTPC 1.0.2 - 03/12/2021","text":"Added Lobry–Rosso–Flandrois model package Updated functions include lrf_1991() model","code":""},{"path":"https://padpadpadpad.github.io/rTPC/news/index.html","id":"rtpc-101","dir":"Changelog","previous_headings":"","what":"rTPC 1.0.1","title":"rTPC 1.0.1","text":"Added NEWS.md file track changes package. Added new vignette vignette(\"bootstrapping_many_curves\") demonstrate run bootstrap procedure multiple curves Updated README reflect ","code":""}]
